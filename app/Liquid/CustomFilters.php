<?php

namespace App\Liquid;

use Liquid\Context;
use Liquid\LiquidException;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\URL;
use Illuminate\Support\Facades\Storage;
use App\Services\TranslationService;

class CustomFilters
{
    public $context;
    
    /**
     * Static arrays to track loaded resources
     */
    private static $loadedAssets = [];
    private static $loadedFonts = [];
    private static $loadedStylesheets = [];
    private static $loadedInlineAssets = [];
    private static $loadedSvgs = [];

    /**
     * Constructor
     */
    public function __construct(Context $context = null)
    {
        $this->context = $context;
    }

    /**
     * Set the current Liquid context for filters to use.
     */
    public function setContext(Context $context): void
    {
        $this->context = $context;
    }

    /**
     * Check if a resource has been loaded and mark it as loaded
     * 
     * @param string $resourceType Type of resource ('asset', 'font', 'stylesheet', etc.)
     * @param string $resourceKey Unique identifier for the resource
     * @return bool True if resource was already loaded, false otherwise
     */
    private function isResourceLoaded(string $resourceType, string $resourceKey): bool
    {
        switch ($resourceType) {
            case 'asset':
                if (isset(self::$loadedAssets[$resourceKey])) {
                    return true;
                }
                self::$loadedAssets[$resourceKey] = true;
                break;
                
            case 'font':
                if (isset(self::$loadedFonts[$resourceKey])) {
                    return true;
                }
                self::$loadedFonts[$resourceKey] = true;
                break;
                
            case 'stylesheet':
                if (isset(self::$loadedStylesheets[$resourceKey])) {
                    return true;
                }
                self::$loadedStylesheets[$resourceKey] = true;
                break;
                
            default:
                // Unknown resource type, always mark as not loaded
                return false;
        }
        
        // Resource wasn't loaded, but is now marked as loaded
        return false;
    }

    /**
     * Reset resource tracking - useful for testing or when rendering multiple independent pages
     */
    public static function resetResourceTracking(): void
    {
        self::$loadedAssets = [];
        self::$loadedFonts = [];
        self::$loadedStylesheets = [];
        self::$loadedInlineAssets = [];
        self::$loadedSvgs = [];
    }

    /**
     * Filtro asset_url - Gera URLs absolutos para assets
     * Este filtro agora verifica o contexto e trata apropriadamente componentes aninhados
     */
    public function asset_url($input) 
    {
        // Obter contexto atual
        $theme = $this->context->get('theme');
        $storeId = $theme['store_id'] ?? '1';
        $themeId = $theme['id'] ?? '176208380215';
        
        // Se o input for nulo ou vazio, retornar string vazia
        if ($input === null || $input === '') {
            return '';
        }
        
        // Se input não for string, tentar converter
        if (!is_string($input)) {
            Log::warning('asset_url: input não é string', [
                'input_type' => gettype($input),
                'input' => $input
            ]);
            
            // Tentar converter para string se possível
            if (is_scalar($input)) {
                $input = (string)$input;
            } else {
                return '';
            }
        }
        
        // Verificar se já é uma URL completa
        if (strpos($input, 'http') === 0 || strpos($input, '//') === 0) {
            return $input;
        }
        
        // Remover aspas do início e fim se existirem
        $assetName = trim($input, '\'"');
        
        if (empty($assetName)) {
            return '';
        }
        
        // Check if asset has been loaded - note we don't prevent multiple URLs,
        // we just track it for possible optimization or debugging
        $this->isResourceLoaded('asset', $assetName);
        
        return url("assets/{$storeId}/{$themeId}/{$assetName}");
    }

   /**
     * Filtro placeholder_svg_tag melhorado que busca SVGs do diretório de assets
     * 
     * Este filtro permite fornecer apenas o nome da SVG (sem extensão) e buscará
     * o arquivo correspondente na pasta assets
     */
    public function placeholder_svg_tag($input, $class = '') 
    {
        // Verificar se input é válido
        if (empty($input) || (!is_string($input) && !is_scalar($input))) {
            Log::warning('placeholder_svg_tag: input inválido', [
                'input_type' => gettype($input),
                'input' => $input
            ]);
            
            // Retornar SVG placeholder genérico
            $svg = "<svg class=\"placeholder-svg\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 525 525\"><rect width=\"525\" height=\"525\" fill=\"#F6F6F6\"/><text x=\"50%\" y=\"50%\" text-anchor=\"middle\" dy=\"0.3em\" fill=\"#A4A4A4\">Placeholder</text></svg>";
            
            if (!empty($class)) {
                $svg = str_replace('class="placeholder-svg"', 'class="placeholder-svg ' . $class . '"', $svg);
            }
            
            return $svg;
        }
        
        // Converter para string se necessário
        if (!is_string($input)) {
            $input = (string)$input;
        }
        
        // Remover aspas do input (caso tenha sido passado com aspas)
        $input = trim($input, "'\"");
        
        // Check if this SVG has already been loaded
        $svgKey = $input . ($class ? "-{$class}" : "");
        if ($this->isResourceLoaded('svg', $svgKey)) {
            // Return an empty div with a data attribute for debugging
            return "<div class=\"svg-already-loaded\" data-svg=\"{$input}\"></div>";
        }
        
        // Get theme context data
        $theme = $this->context->get('theme');
        
        // Se não houver dados de tema ou estiverem incompletos
        if (empty($theme) || !isset($theme['store_id']) || !isset($theme['id'])) {
            $storeId = request()->route('store_id') ?? '1';
            $themeId = request()->route('theme_id') ?? '176208380215';
        } else {
            $storeId = $theme['store_id'];
            $themeId = $theme['id'];
        }
        
        // Caminho e nome do arquivo
        $assetName = basename($input);
        
        // Adicionar extensão .svg se não existir
        if (!preg_match('/\.svg$/i', $assetName)) {
            $assetName .= '.svg';
        }
        
        // Caminho completo para o arquivo SVG
        $assetPath = "{$storeId}/{$themeId}/assets/{$assetName}";
        
        // Tentar ler o arquivo SVG diretamente do disco
        try {
            // Verificar se o arquivo existe
            if (\Storage::disk('themes')->exists($assetPath)) {
                // Carregar o conteúdo do SVG
                $svgContent = \Storage::disk('themes')->get($assetPath);
                
                // Verificar se o conteúdo parece ser um SVG válido
                if (stripos($svgContent, '<svg') !== false) {
                    // Adicionar a classe extra se fornecida
                    if (!empty($class)) {
                        // Encontrar o primeiro atributo class ou adicionar um
                        if (preg_match('/class=(["\'])(.*?)\\1/i', $svgContent, $matches)) {
                            $originalClass = $matches[2];
                            $newClass = $originalClass . ' ' . $class;
                            $svgContent = str_replace($matches[0], "class={$matches[1]}{$newClass}{$matches[1]}", $svgContent);
                        } else {
                            // Adicionar atributo class logo após a tag <svg
                            $svgContent = preg_replace('/(<svg\s)/i', "$1class=\"{$class}\" ", $svgContent);
                        }
                    }
                    
                    // Adicionar classe placeholder-svg se não estiver presente
                    if (strpos($svgContent, 'placeholder-svg') === false) {
                        // Se já tem alguma classe
                        if (preg_match('/class=(["\'])(.*?)\\1/i', $svgContent, $matches)) {
                            $originalClass = $matches[2];
                            if (strpos($originalClass, 'placeholder-svg') === false) {
                                $newClass = 'placeholder-svg ' . $originalClass;
                                $svgContent = str_replace($matches[0], "class={$matches[1]}{$newClass}{$matches[1]}", $svgContent);
                            }
                        } else {
                            // Adicionar atributo class logo após a tag <svg
                            $svgContent = preg_replace('/(<svg\s)/i', "$1class=\"placeholder-svg\" ", $svgContent);
                        }
                    }
                    
                    return $svgContent;
                }
            }
            
        } catch (\Exception $e) {
            // Registrar erro
            Log::error('placeholder_svg_tag: Erro ao ler SVG do disco', [
                'input' => $input,
                'assetPath' => $assetPath,
                'error' => $e->getMessage()
            ]);
        }
        
        // Fallback para placeholders pré-definidos se arquivo não existir ou houver erro
        $placeholders = [
            'hero-apparel-1' => '<svg class="placeholder-svg" preserveAspectRatio="xMaxYMid slice" viewBox="0 0 1300 730" fill="none" xmlns="http://www.w3.org/2000/svg"><g clip-path="url(#clip0_779_1238)"><path d="M1300 410H0v320h1300V410Z" fill="#5BA7B1"></path><path d="M1300 0H0v410h1300V0Z" fill="#E8BE9E"></path><path d="M474 410c28.51-39.81 73.78-89.8 142-120 113.63-50.31 194.66-3.1 266-52 41.04-28.12 81.7-89.98 80-238h338v410H474Z" fill="#EDAB8E"></path><path d="M1174 0c-4.57 45.64-17.01 110.48-52 180-69.25 137.58-182.37 205.13-230 230h408V0h-126Z" fill="#EA9A81"></path><path d="M126 410c124.14 0 213.59-14.83 242-66 38.93-70.13-74.2-158.33-34-262 15.92-41.06 49.03-66.82 74-82H0v410h126Z" fill="#EDAB8E"></path><path d="M126 410c-68.88-117.13-69.26-250.08-2-334 36.03-44.96 83.52-65.93 116-76H0v410h126Z" fill="#EA9A81"></path><path d="M442 410h88c-3.51-10.52-7.01-21.04-10.52-31.56-1.16-3.48-6.05-3.57-7.34-.14-1.42 3.8-2.85 7.6-4.27 11.39-1.29 3.44-6.18 3.35-7.34-.14l-7.65-22.96c-1.08-3.25-5.52-3.62-7.13-.6-2.61 4.89-5.22 9.79-7.83 14.68-1.55 2.91-5.79 2.69-7.04-.36-3.69-9.02-7.38-18.03-11.06-27.05-1.35-3.29-6.03-3.21-7.26.13l-10.53 28.59v28l-.03.02Z" fill="#108060"></path><path d="M1300 224H758.35c-2.89 0-3.07-4.27-.19-4.51l75.83-6.32A92.708 92.708 0 0 0 896.78 181l30.62-35.85c14.34-16.79 39.96-17.8 55.57-2.18l12.34 12.34c21.76 21.76 57.58 19.93 77-3.95l34.73-42.7c25.81-31.73 74.62-30.56 98.88 2.36 19.11 25.93 56.68 29.09 79.85 6.72l14.24-13.75v120l-.01.01Z" fill="#F7E1D5"></path><path d="M220.89 256h405.42c2.16 0 2.3-3.2.14-3.38l-56.76-4.73a69.338 69.338 0 0 1-46.99-24.08l-22.92-26.83c-10.74-12.57-29.91-13.32-41.6-1.63l-9.24 9.24c-16.29 16.29-43.1 14.91-57.63-2.96l-25.99-31.96c-19.32-23.75-55.85-22.87-74.01 1.77L264.3 208.1 212 222.22l8.89 33.78Z" fill="#EAD1C1"></path><path d="m980 410 73.94-92.43a55.18 55.18 0 0 1 35.49-20.18l33.63-4.67a55.168 55.168 0 0 0 37.31-22.58l35.94-50.31c8.42-11.79 25.37-13.3 35.75-3.19l67.94 66.24V410H980Z" fill="#9FA5AB"></path><path opacity=".3" d="M1214.49 209.95c-6.95.32-13.75 3.67-18.18 9.87l-35.94 50.31a55.168 55.168 0 0 1-37.31 22.58l-33.63 4.67a55.132 55.132 0 0 0-35.49 20.18L980 409.99h178l58.33-104.66c5.57-9.99 3.05-22.54-5.95-29.61a23.25 23.25 0 0 1-7.94-24.85l12.04-40.94.01.02Z" fill="#D2D5D9"></path><path d="m464 410-46.64-91.42a12.72 12.72 0 0 0-10.74-6.92l-55.29-2.51c-15.35-.7-28.79-10.52-34.11-24.93l-30.7-83.14c-5.19-14.05-18.11-23.78-33.05-24.87l-33.65-2.46a38.223 38.223 0 0 1-32.69-23.92l-12.8-31.99a6.86 6.86 0 0 0-8.35-4.02L0 164v246s.06.02.09 0H464Z" fill="#818990"></path><path d="m96 410 6-66 21-56c1.03-2.73 4.9-2.71 5.89.04l12.38 34.4c.97 2.69 4.74 2.79 5.84.15l9.65-22.91c1.12-2.67 4.95-2.52 5.87.23l12.46 37.38c.95 2.84 4.95 2.87 5.94.04l7.24-20.67c1.05-3 5.39-2.72 6.03.4l6.24 29.93c.56 2.68 4.04 3.41 5.63 1.18l12.31-17.24c1.48-2.07 4.68-1.61 5.52.79l10.63 30.55c1.02 2.93 5.21 2.76 6-.23l4.5-17.11c.81-3.08 5.16-3.13 6.05-.08l8.73 29.92c.78 2.68 4.4 3.08 5.76.65l12.7-22.86c1.35-2.44 4.97-2.03 5.76.65l9.5 32.56c.82 2.81 4.69 3.07 5.88.4l8.75-19.69c1.22-2.74 5.22-2.37 5.92.55l6.1 25.6c.65 2.72 4.26 3.3 5.72.92l8.26-13.42c1.44-2.33 4.96-1.83 5.7.8l8.07 29.07H96Z" fill="#02614E"></path><path d="M0 410h218l-9.65-26.54a39.431 39.431 0 0 0-23.85-23.68l-51.05-18.15a39.436 39.436 0 0 1-25.57-30.02L102 279.66a39.44 39.44 0 0 0-24.53-29.63L0 220v190Z" fill="#686E72"></path><path d="M0 410h88c-3.73-11.18-7.46-22.37-11.18-33.55-.94-2.82-4.9-2.89-5.95-.11-1.91 5.11-3.83 10.21-5.74 15.32-1.04 2.78-5.01 2.71-5.95-.11l-8.86-26.59c-.88-2.63-4.47-2.93-5.78-.49-3.13 5.87-6.26 11.73-9.39 17.6-1.26 2.36-4.69 2.18-5.7-.29-4.13-10.09-8.26-20.18-12.38-30.27-1.09-2.66-4.88-2.6-5.88.1C7.46 361.74 3.73 371.87 0 381.99V410Z" fill="#02614E"></path><path d="m636.01 410 36.48-43.78c14.28-17.14 37.37-24.17 58.78-17.92l59.17 17.3c21.57 6.3 44.82-.88 59.06-18.26l53.45-65.19c3.24-3.95 7.88-6.51 12.95-7.15l16.59-2.07a51.1 51.1 0 0 1 40.94 13.11L1108 409.99H636l.01.01Z" fill="#818990"></path><path d="m1279.24 295.49-12.18 41.97c-.91 3.13-5.33 3.17-6.29.05l-9.05-29.41c-1-3.24-5.64-3.03-6.35.28l-9.35 44.07c-.65 3.08-4.84 3.56-6.18.72l-7.92-16.84c-1.31-2.79-5.41-2.39-6.15.6l-5.64 22.58c-.74 2.94-4.73 3.4-6.11.7l-15.16-29.66c-1.36-2.67-5.3-2.26-6.09.63l-7.07 25.92c-.84 3.08-5.14 3.27-6.25.27l-6.49-17.62c-1.14-3.1-5.62-2.76-6.29.47l-6.46 31.11c-.66 3.18-5.05 3.57-6.26.55l-12.18-30.46c-1.18-2.96-5.46-2.67-6.23.42l-8.87 35.48c-.79 3.16-5.21 3.36-6.28.28l-8.77-25.21c-1.07-3.08-5.49-2.88-6.28.28l-6.1 24.4c-.77 3.09-5.05 3.38-6.23.42l-7.67-19.18c-1.14-2.84-5.19-2.72-6.16.18l-10.21 30.62c-.98 2.94-5.12 3.01-6.19.1l-7.89-21.41c-1.03-2.79-4.95-2.88-6.1-.14l-9.33 22.17c-1.18 2.81-5.22 2.63-6.15-.27l-12.04-37.45c-.99-3.07-5.35-3.02-6.27.07l-10.43 35.2c-.87 2.93-4.93 3.19-6.15.38l-7.13-16.3c-1.18-2.71-5.06-2.59-6.09.18l-7.76 21.07c-1.09 2.96-5.33 2.83-6.23-.2-3.37-11.38-6.74-22.76-10.12-34.15-.92-3.11-5.32-3.14-6.28-.04-3.9 12.55-7.79 25.1-11.69 37.65-.95 3.07-5.3 3.08-6.26.02l-6.47-20.48c-.88-2.78-4.68-3.12-6.04-.53l-18.34 35.01h404v-76l-14.53-38.75c-1.11-2.96-5.34-2.8-6.22.24l-.02.01Z" fill="#02614E"></path><path d="M576 186c35.346 0 64-28.654 64-64 0-35.346-28.654-64-64-64-35.346 0-64 28.654-64 64 0 35.346 28.654 64 64 64Z" fill="#EAD1C1"></path><path d="M576 170c26.51 0 48-21.49 48-48s-21.49-48-48-48-48 21.49-48 48 21.49 48 48 48Z" fill="#fff"></path><path d="m264.3 269.34 4.38 12.32c11.72 32.97 41.95 55.78 76.87 58.01a87.466 87.466 0 0 0 63.73-21.95l4.15-3.69a12.71 12.71 0 0 0-6.82-2.37l-55.29-2.51c-15.35-.7-28.79-10.52-34.11-24.93l-30.7-83.14c-5.19-14.05-18.11-23.78-33.05-24.87l-33.65-2.46a38.223 38.223 0 0 1-32.69-23.92l-12.8-31.99a6.822 6.822 0 0 0-3.17-3.51l-10.98 32.29c-11.16 32.84 6.32 68.52 39.11 79.83l33.29 11.48a51.472 51.472 0 0 1 31.72 31.41h.01Z" fill="#9FA5AB"></path><path d="M51.84 244.38a39.431 39.431 0 0 1 16.74 34.63l-1.91 32.43a39.42 39.42 0 0 0 17.67 35.25l45.23 29.81a39.47 39.47 0 0 1 17.51 28.69l.52 4.8h70.52l-9.65-26.54a39.431 39.431 0 0 0-23.85-23.68l-51.05-18.15A39.436 39.436 0 0 1 108 311.6l-5.89-31.95a39.44 39.44 0 0 0-24.53-29.63L38 234.67l13.84 9.7v.01Z" fill="#818990"></path><path d="m756.08 443.99.04.01-.04-.01Z" fill="#686E72"></path><path opacity=".8" d="m790.66 365.67 39.39 11.51c21.9 6.4 45.55.69 62.12-14.99a64.199 64.199 0 0 0 19.25-56.93l-4.38-26.98a19.967 19.967 0 0 0-4.21 3.85l-53.45 65.19a56.03 56.03 0 0 1-58.71 18.35h-.01ZM706 388c-.24-15.7 16.55-32.5 41.81-34.86l-16.54-4.84c-21.41-6.26-44.5.78-58.78 17.92L636.01 410H718c-3.29-2.83-11.83-10.97-12-22Z" fill="#9FA5AB"></path><path d="M416.96 410a27.009 27.009 0 0 0 17.23 10.44l74.31 12.16c4.49.73 4.13 7.3-.41 7.54l-90.19 4.96c-4.91.27-4.9 7.51.01 7.77l95.5 4.97c4.71.25 5.01 7.08.34 7.74l-77.82 10.96c-4.62.65-4.39 7.4.27 7.73L558.37 493c6.93.49 7.28 10.54.41 11.52l-26.87 3.84c-4.68.67-4.34 7.53.38 7.74l118.58 5.33c4.61.21 5.09 6.85.55 7.71l-30.86 5.88c-4.44.85-4.11 7.31.39 7.7l41.36 3.57c37.51 3.23 75.27 1.58 112.35-4.93l42.85-7.52c4.39-.77 4.25-7.11-.17-7.69l-88.29-11.52c-4.63-.6-4.47-7.35.18-7.74l70.24-5.77c4.8-.39 4.75-7.44-.06-7.76l-63.91-4.32c-4.75-.32-4.88-7.25-.15-7.75l112.28-11.82c4.77-.5 4.58-7.51-.2-7.76l-91.17-4.75c-6.25-.33-6.45-9.48-.22-10.08l30.04-2.91c4.65-.45 4.7-7.22.06-7.74l-52.89-5.97c-4.63-.52-4.44-7.31.22-7.57l58.3-3.24c9.03-.5 17.68-3.81 24.74-9.46H416.94l.02.01Z" fill="#63B5B1"></path><path d="M0 478c15.69 2.92 39.93 5.53 68 0 42.62-8.4 48.21-26.53 84-34 45.2-9.43 57.35 15.07 114 14 9.94-.19 18.2-1.11 25.64-2.55 36.52-7.09 62.17-18.56 68.36-21.45 22.81-10.63 66.5-17.19 157.8-.42 67.4-3.19 134.8-6.39 202.2-9.58 6.3-.79 18.55-2.14 33.98-2.49 57.4-1.32 91.51 12.68 158.02 16.49 17.53 1 29.44.78 43.36-1.93 24.93-4.85 34.21-15.04 78.64-12.07 71.18 4.75 89.94 33.73 158 38 45.51 2.86 83.37-7.2 108-16v-36H0v68Z" fill="#63B5B1"></path><path opacity=".5" d="m425.74 101.25 12.14 6.54a6.7 6.7 0 0 0 6.98-.39l10.76-7.46c1.24-.86.32-2.8-1.13-2.37l-10.43 3.05c-2.24.65-4.6.76-6.89.32l-10.59-2.06c-1.44-.28-2.14 1.69-.85 2.38l.01-.01ZM729.78 162.53l11.66 7.35a6.686 6.686 0 0 0 6.99.09l11.25-6.7c1.3-.77.51-2.77-.97-2.44l-10.61 2.32c-2.28.5-4.64.45-6.89-.15l-10.42-2.78c-1.42-.38-2.25 1.54-1.01 2.32v-.01Z" fill="#964F48"></path><path opacity=".75" d="m656.07 194.86 16.65 2.66a8.18 8.18 0 0 0 7.91-3.26l9.43-12.95c1.09-1.49-.76-3.36-2.26-2.28l-10.82 7.72a17.873 17.873 0 0 1-7.83 3.14l-13.06 1.89c-1.78.26-1.79 2.81-.02 3.09v-.01Z" fill="#964F48"></path><path d="m695.71 113.63 12.93 12.86a8.834 8.834 0 0 0 9 2.13l16.46-5.4c1.9-.62 1.46-3.42-.54-3.43l-14.37-.06c-3.08-.01-6.12-.77-8.85-2.19l-12.65-6.6c-1.72-.9-3.35 1.33-1.98 2.7v-.01Z" fill="#964F48"></path><path d="M894.938 386.359c-13.528-2.239-26.508 6.204-29.834 19.39l-4.757 17.749a44.424 44.424 0 0 0 0 21.713c2.119 8.43 8.757 15.009 17.26 17.109 5.908 1.461 9.304 7.609 7.381 13.326L877.172 499h37.145L920 420.202l-25.076-33.857.014.014Z" fill="#E8BE9E"></path><path d="m911 466 7.311 29.252L920.224 506h6.612L929 466h-18Z" fill="#EA9A81"></path><path d="m865.215 624.829-52.827-51.996c-9.913-9.757-23.901-14.346-37.776-12.39-17.18 2.412-31.364 14.429-36.348 30.788l-11.005 36.107c-1.162 3.817 1.736 7.662 5.796 7.662h127.89c5.39 0 8.079-6.408 4.27-10.157v-.014Z" fill="#2E5157"></path><path d="m744.04 632.85 10.992-36.111c4.979-16.36 19.145-28.379 36.305-30.791a44.677 44.677 0 0 1 11.663-.096 45.066 45.066 0 0 0-28.445-5.417c-17.159 2.412-31.326 14.431-36.305 30.791l-10.992 36.111c-1.16 3.818 1.735 7.663 5.79 7.663h10.754a6.013 6.013 0 0 1 .238-2.15Z" fill="#3C7980"></path><path d="M819.933 546c-1.406 3.619-2.617 7.307-3.55 11.063L797 635h29.492L857 572.915 819.947 546h-.014Z" fill="#E8BE9E"></path><path d="M954.273 598.986a80.22 80.22 0 0 0 35.466-32.084l7.624-12.954c18.687-31.722 5.937-72.604-27.437-88.137-10.528-4.895-16.993-15.715-15.932-27.26l2.164-23.732c1.215-13.275-2.904-26.619-11.897-36.463-14.856-16.286-38.649-19.911-57.472-9.467l-14.075 7.808c-7.386 4.099-10.612 12.995-7.582 20.86l10.515 27.315a107.614 107.614 0 0 0 52.375 57.601c19.256 9.621 25.469 34.078 13.112 51.689l-19.688 28.083L954.259 599l.014-.014Z" fill="#6E3A35"></path><path opacity=".75" d="m938.181 562.986 19.499-27.951c12.225-17.529 6.085-41.871-12.986-51.448-23.813-11.949-42.317-32.392-51.873-57.332l-10.413-27.188c-3.001-7.827.207-16.681 7.509-20.762l13.94-7.772c5.781-3.22 12.031-5.065 18.351-5.634-11.685-3.442-24.533-2.249-35.637 3.941l-13.94 7.772c-7.316 4.08-10.51 12.935-7.509 20.762l10.413 27.188c9.556 24.94 28.059 45.383 51.873 57.332 19.07 9.576 25.224 33.919 12.986 51.448l-19.5 27.951L938.181 563v-.014Z" fill="#AF5947"></path><path d="M973.436 592.368c-.621-16.691-4.045-32.654-9.993-47.368L934 574.442 951.167 635H975l-1.579-42.632h.015Z" fill="#E8BE9E"></path><path d="M969 559.741c-1.419-5.037-3.082-9.964-5.059-14.741L934 574.442 951.457 635h15.665l-12.598-43.703c-2.408-8.359 0-17.322 6.307-23.526l8.155-8.016.014-.014Z" fill="#EA9A81"></path><path d="M945.231 561.25 962 543.979c-6.536-16.619-16.174-31.641-28.581-44.303-7.366-7.511-17.655-11.676-28.926-11.676h-18.002c-9.568 0-19.303 2.999-27.874 8.566-18.154 11.815-32.126 29.128-39.617 48.635l24.108 21.339c4.32 4.318 5.456 10.898 2.852 16.424L824.137 635h105.447l2.575-45.039c.596-10.398 5.29-20.714 13.072-28.725v.014Z" fill="#02614E"></path><path opacity=".25" d="M962 543.948c-6.397-16.622-15.83-31.647-27.974-44.311-6.804-7.096-16.17-11.207-26.47-11.637l12.022 40.048a99.609 99.609 0 0 1 1.125 53.129L907 635h23.271l2.521-45.047c.583-10.401 5.178-20.718 12.795-28.731L962 543.948Z" fill="#142924"></path><path d="M863.006 501.368c4.692-5.373 10.126-9.885 15.994-13.368-6.919 1.213-13.739 3.892-19.93 7.953-18.361 12-32.493 29.585-40.07 49.397L834.35 559c4.314-20.94 14.16-41.035 28.656-57.618v-.014Z" fill="#00735C"></path><path d="M494 630.718v-51.341c0-9.728 7.693-17.945 18.007-19.234l144.139-17.973c9.282-1.15 18.229 3.63 21.867 11.695l37.366 82.95c2.467 5.488 2.104 11.738-.99 16.948l-18.578 31.262c-3.791 6.374-11.066 10.213-18.857 9.964l-145.714-4.698c-8.223-.263-15.498-5.044-18.55-12.181l-17.199-40.214a18.377 18.377 0 0 1-1.477-7.206l-.014.028Z" fill="#975D48"></path><path d="M471 632.718v-51.341c0-9.728 7.693-17.946 18.007-19.234l144.139-17.973c9.282-1.15 18.229 3.63 21.867 11.695l37.366 82.95c2.467 5.488 2.104 11.738-.99 16.948l-18.578 31.262c-3.791 6.375-11.066 10.213-18.857 9.964l-145.714-4.698c-8.223-.263-15.498-5.044-18.55-12.181l-17.199-40.214a18.376 18.376 0 0 1-1.477-7.205l-.014.027Z" fill="#BF8563"></path><path opacity=".5" d="M557.941 687.156 541.061 556 517 559.089l16.664 129.508a6.902 6.902 0 0 0 2.899 4.807l18.113.596a6.439 6.439 0 0 0 1.639-1.358 7.008 7.008 0 0 0 1.626-5.472v-.014ZM636.059 691.273a6.993 6.993 0 0 0 6.569 5.351l11.133.376h.238c2.157 0 4.16-.961 5.49-2.647 1.331-1.686 1.821-3.846 1.317-5.922L626.662 545 602 548.079c.028.223.07.46.126.683l33.919 142.497.014.014Z" fill="#975D48"></path><path d="M530.223 558.016c-.468-3.43-3.489-6.016-7.021-6.016-.312 0-.624.014-.936.055l-11.106 1.439c-3.872.497-6.609 3.982-6.099 7.758l17.46 129.359c.454 3.36 3.305 5.891 6.794 6.002l11.347.387h.241a7.18 7.18 0 0 0 5.333-2.351 6.778 6.778 0 0 0 1.702-5.462l-17.701-131.185-.014.014ZM648.837 690.47l-33.746-144.113c-.743-3.159-3.495-5.357-6.686-5.357-.303 0-.606.014-.908.056l-10.524 1.419a6.902 6.902 0 0 0-4.76 2.95 7.061 7.061 0 0 0-1.032 5.552L624.5 693.281c.716 3.047 3.371 5.246 6.452 5.343l10.937.376h.234c2.119 0 4.086-.96 5.393-2.644a6.97 6.97 0 0 0 1.293-5.913l.028.027Z" fill="#6D493C"></path><path d="m1137.25 392.823-26.98-23.175c-7.2-6.174-17.37-7.453-25.7-3.01-9.63 5.133-17 14.246-19.86 25.482l-.37 1.491a109.471 109.471 0 0 0-2.37 41.372c.61 4.515 2.69 8.691 5.92 11.841a19.422 19.422 0 0 0 10.87 5.358l10.65.717c4.08.802 6.57 5.035 5.34 9.071 0 0-1.85 6.089-3.45 11.335 9.59 3.796 19.46 5.695 29.33 5.695 9.21 0 18.42-1.688 27.37-4.978-4.93-5.949-8.17-15.315-7.51-21.84l4.9-38.011c1.04-8.058-2.03-16.102-8.12-21.348h-.02Z" fill="#975D48"></path><path opacity=".5" d="M1131.49 470.042 1148 473c-4.98-5.792-8.26-14.926-7.59-21.265l4.95-37.013-6.6-10.722-11.98 45.078c-1.95 7.326-.18 15.117 4.73 20.951l-.02.013Z" fill="#6D493C"></path><path d="m1161.96 402.99-1.18-25.362c-.87-13.77-11.14-25.419-24.75-27.027-3.17-.375-6.19-.194-8.75.61a20.941 20.941 0 0 1-17.26-2.163l-5.88-3.633a29.637 29.637 0 0 0-34.75 2.634l-.09.083c-4.16 3.842-6.73 9.125-7.23 14.797-.58 6.683 2.38 13.173 7.65 17.167 1.61 1.22 3.05 2.635 4.36 4.174 4.29 5.075 6.5 11.551 6.67 18.207.05 2.177-.06 4.119-.33 5.464l-.22 1.081c-.68 3.231 1.65 6.31 4.92 6.546.35.027.71 0 1.08-.07 1.77-.346 3.01-1.872 3.38-3.647 1.1-5.283 4.92-9.166 9.46-9.166 5.42 0 9.8 5.519 9.8 12.328 0 3.564-1.2 6.767-3.13 9.014-3.49 4.076-3.46 10.22-.15 14.449a18.682 18.682 0 0 0 6.31 5.158c2.54 1.29 5.35 1.886 8.19 1.983l12.66.375a18.64 18.64 0 0 0 15.57-7.585l5.41-7.378c.4-.554.8-1.109 1.17-1.678 5.15-7.737 7.45-17.042 7.09-26.361Z" fill="#142924"></path><path opacity=".25" d="m1077.42 364.743.1-.081c10.97-8.995 20.24-10.145 32.47-2.854l6.57 3.923a24.105 24.105 0 0 0 19.29 2.34c8.85-2.705 15.65-2.056 24.15 1.366-3.43-10.064-12.34-17.801-23.47-19.072-3.19-.365-6.22-.189-8.8.595-5.84 1.772-12.17 1.001-17.38-2.11l-5.92-3.544c-11.02-6.574-25.12-5.546-35 2.57l-.08.081c-4.19 3.747-6.78 8.9-7.28 14.433-.57 6.452 2.34 12.714 7.53 16.61a24.355 24.355 0 0 1 7.84-14.257h-.02Z" fill="#6B7177"></path><path d="M1217 571.844 1249.18 541l39.82 86.272-33.9 2.728-38.1-58.156ZM1056 584.222 1017.4 562a1983.872 1983.872 0 0 0-23.4 95.638c10.25 3.375 20.39 6.833 29.06 10.362l32.93-83.778h.01Z" fill="#975D48"></path><path d="M1072.4 481.732c-10.04 5.728-19.03 13.161-26.38 22.088-9.86 11.945-17.59 25.259-23.14 39.356-.23.559-.45 1.118-.66 1.677-2.44 6.231-4.63 10.506-6.22 16.989l21.32 15.409 25.26 3.647 5.59-10.66c.94 29.116-5.2 55.646-4.13 84.762a2012.614 2012.614 0 0 1 160.89-.489c-5.34-33.475-14.87-64.406-21.41-97.839 3.65 4.764 5.87 10.716 9.44 15.494 7.25-.307 14.51-.573 21.76-.796 4.69-7.545 14.45-18.791 19.28-26.308-3.98-6.077-8.01-12.126-12.11-18.176-14.09-18.986-32.73-34.927-54.82-46.691L1158.58 473a92.251 92.251 0 0 1-8.45 4.596c-11.71 5.631-24.18 8.662-36.77 8.872-13.42.21-23.58-1.649-35.83-7.684l-5.14 2.934.01.014Z" fill="#DE6A5A"></path><path opacity=".1" d="M1068.87 495.403c.13-.111.25-.222.38-.319a567.35 567.35 0 0 1 3.56-3.133 84.583 84.583 0 0 1 10.19-7.624c-2.8-.957-5.55-2.093-8.25-3.327l-2.69 1.539c-9.98 5.683-18.91 13.058-26.22 21.916-9.8 11.852-17.49 25.063-23 39.05-.23.555-.45 1.109-.66 1.664-2.42 6.182-4.6 10.424-6.18 16.856l8.28 5.975c1.45-5.24 3.17-10.425 5.2-15.498.22-.569.44-1.137.68-1.691 8.29-20.78 21.24-39.868 38.74-55.394l-.03-.014Z" fill="#F7E1D5"></path><path d="M1241.86 527.309c-12.03-16.169-27.39-30.133-45.37-41.182-5.07-3.111-10.38-5.817-15.86-8.147l-18.69-7.98c-2.77 1.688-10.08 8.273-12.94 9.64l3.38 1.186c22.55 28.236 32.78 65.902 28.39 101.741L1172.64 649c10.58-.098 40.7-.112 51.29-.056-4.9-30.231-13.89-57.923-19.77-88.112 3.4 3.488 5.38 8.161 8.72 11.663 13.51-.572 30.99-11.342 38.17-22.488l2.95-4.576a1284.8 1284.8 0 0 0-12.13-18.15l-.01.028Z" fill="#CD5747"></path><path d="m1016.92 560.014-3.44 10.32a9.342 9.342 0 0 0 4.04 10.964c8.09 4.899 20.37 10.238 30.03 12.461 4.07.947 8.27-.961 10.32-4.57l5.13-8.989c-15.69-1.825-36.49-10.127-46.06-20.2l-.02.014Z" fill="#F7E1D5"></path><path d="M1252.85 546c-10.61 12.254-28.02 23.477-41.85 27.046 2.09 2.872 4.61 5.897 6.95 8.867 2.19 2.76 5.95 3.806 9.29 2.579 9.06-3.332 22.49-12.059 30.14-19.016 2.83-2.579 3.46-6.762 1.44-9.982a2476.29 2476.29 0 0 0-5.97-9.494Z" fill="#E8BE9E"></path><path d="M1151.47 463.304a9.745 9.745 0 0 0-7.1.895c-9.8 5.395-20.34 8.334-30.94 8.519-6.92.113-13.83-.952-20.49-3.138a9.678 9.678 0 0 0-7.26.483l-7.99 6.02c-2.57 1.931-2.13 6.048.79 7.326 11.04 4.813 23.7 7.78 35.06 7.582 8.67-.142 18.38-2.088 27.36-5.225 6.1-2.13 11.8-5.381 16.9-9.499l3.7-2.996c2.4-1.931 1.82-5.835-1.02-6.928-3.03-1.164-6.53-2.428-9.01-3.053v.014Z" fill="#F7E1D5"></path><path d="m1063 639 11.11-8.488c9.33-17.356 11.3-40.094 9.03-61.118-.74-6.9-9.93-8.797-13.43-2.796l-1.71 2.923-5 69.479Z" fill="#CD5747"></path><path d="M1160.44 466.42c-3.09-1.186-6.66-2.473-9.18-3.11a9.973 9.973 0 0 0-7.25.911 70.47 70.47 0 0 1-13.01 5.569c8.12 1.75 15.11 5.497 20.34 11.21a60.322 60.322 0 0 0 6.36-4.484l3.77-3.052c2.44-1.967 1.86-5.945-1.04-7.059l.01.015Z" fill="#E8BE9E"></path><path d="M318.148 584.026 389.152 730H1300V612.215l-113.51 12.627a1077.374 1077.374 0 0 1-158.28 5.902L622.569 616.03a1076.718 1076.718 0 0 1-207.552-27.898l-84.334-19.823c-9.117-2.144-16.635 7.28-12.535 15.717Z" fill="#142924"></path><path opacity=".25" d="M1186.49 624.842a1077.374 1077.374 0 0 1-158.28 5.902L622.569 616.03a1079.098 1079.098 0 0 1-173.044-20.394 1049.917 1049.917 0 0 1-34.508-7.504l-84.334-19.823c-9.117-2.144-16.635 7.28-12.535 15.717L389.152 730h126.889l-41.958-86.254c-5.907-12.139 4.267-25.948 17.567-23.819a1079.754 1079.754 0 0 0 130.919 12.808l405.641 14.714c52.84 1.921 105.74-.056 158.28-5.902L1300 628.92v-16.705l-113.51 12.627Z" fill="#6B7177"></path></g><defs><clipPath id="clip0_779_1238"><path fill="#fff" d="M0 0h1300v730H0z"></path></clipPath></defs></svg>',
            'hero-apparel-2' => '<svg class="placeholder-svg" preserveAspectRatio="xMaxYMid slice" viewBox="0 0 1300 730" fill="none" xmlns="http://www.w3.org/2000/svg"><g clip-path="url(#clip0_779_1238)"><path d="M1300 410H0v320h1300V410Z" fill="#5BA7B1"></path><path d="M1300 0H0v410h1300V0Z" fill="#E8BE9E"></path><path d="M474 410c28.51-39.81 73.78-89.8 142-120 113.63-50.31 194.66-3.1 266-52 41.04-28.12 81.7-89.98 80-238h338v410H474Z" fill="#EDAB8E"></path><path d="M1174 0c-4.57 45.64-17.01 110.48-52 180-69.25 137.58-182.37 205.13-230 230h408V0h-126Z" fill="#EA9A81"></path><path d="M126 410c124.14 0 213.59-14.83 242-66 38.93-70.13-74.2-158.33-34-262 15.92-41.06 49.03-66.82 74-82H0v410h126Z" fill="#EDAB8E"></path><path d="M126 410c-68.88-117.13-69.26-250.08-2-334 36.03-44.96 83.52-65.93 116-76H0v410h126Z" fill="#EA9A81"></path><path d="M442 410h88c-3.51-10.52-7.01-21.04-10.52-31.56-1.16-3.48-6.05-3.57-7.34-.14-1.42 3.8-2.85 7.6-4.27 11.39-1.29 3.44-6.18 3.35-7.34-.14l-7.65-22.96c-1.08-3.25-5.52-3.62-7.13-.6-2.61 4.89-5.22 9.79-7.83 14.68-1.55 2.91-5.79 2.69-7.04-.36-3.69-9.02-7.38-18.03-11.06-27.05-1.35-3.29-6.03-3.21-7.26.13l-10.53 28.59v28l-.03.02Z" fill="#108060"></path><path d="M1300 224H758.35c-2.89 0-3.07-4.27-.19-4.51l75.83-6.32A92.708 92.708 0 0 0 896.78 181l30.62-35.85c14.34-16.79 39.96-17.8 55.57-2.18l12.34 12.34c21.76 21.76 57.58 19.93 77-3.95l34.73-42.7c25.81-31.73 74.62-30.56 98.88 2.36 19.11 25.93 56.68 29.09 79.85 6.72l14.24-13.75v120l-.01.01Z" fill="#F7E1D5"></path><path d="M220.89 256h405.42c2.16 0 2.3-3.2.14-3.38l-56.76-4.73a69.338 69.338 0 0 1-46.99-24.08l-22.92-26.83c-10.74-12.57-29.91-13.32-41.6-1.63l-9.24 9.24c-16.29 16.29-43.1 14.91-57.63-2.96l-25.99-31.96c-19.32-23.75-55.85-22.87-74.01 1.77L264.3 208.1 212 222.22l8.89 33.78Z" fill="#EAD1C1"></path><path d="m980 410 73.94-92.43a55.18 55.18 0 0 1 35.49-20.18l33.63-4.67a55.168 55.168 0 0 0 37.31-22.58l35.94-50.31c8.42-11.79 25.37-13.3 35.75-3.19l67.94 66.24V410H980Z" fill="#9FA5AB"></path><path opacity=".3" d="M1214.49 209.95c-6.95.32-13.75 3.67-18.18 9.87l-35.94 50.31a55.168 55.168 0 0 1-37.31 22.58l-33.63 4.67a55.132 55.132 0 0 0-35.49 20.18L980 409.99h178l58.33-104.66c5.57-9.99 3.05-22.54-5.95-29.61a23.25 23.25 0 0 1-7.94-24.85l12.04-40.94.01.02Z" fill="#D2D5D9"></path><path d="m464 410-46.64-91.42a12.72 12.72 0 0 0-10.74-6.92l-55.29-2.51c-15.35-.7-28.79-10.52-34.11-24.93l-30.7-83.14c-5.19-14.05-18.11-23.78-33.05-24.87l-33.65-2.46a38.223 38.223 0 0 1-32.69-23.92l-12.8-31.99a6.86 6.86 0 0 0-8.35-4.02L0 164v246s.06.02.09 0H464Z" fill="#818990"></path><path d="m96 410 6-66 21-56c1.03-2.73 4.9-2.71 5.89.04l12.38 34.4c.97 2.69 4.74 2.79 5.84.15l9.65-22.91c1.12-2.67 4.95-2.52 5.87.23l12.46 37.38c.95 2.84 4.95 2.87 5.94.04l7.24-20.67c1.05-3 5.39-2.72 6.03.4l6.24 29.93c.56 2.68 4.04 3.41 5.63 1.18l12.31-17.24c1.48-2.07 4.68-1.61 5.52.79l10.63 30.55c1.02 2.93 5.21 2.76 6-.23l4.5-17.11c.81-3.08 5.16-3.13 6.05-.08l8.73 29.92c.78 2.68 4.4 3.08 5.76.65l12.7-22.86c1.35-2.44 4.97-2.03 5.76.65l9.5 32.56c.82 2.81 4.69 3.07 5.88.4l8.75-19.69c1.22-2.74 5.22-2.37 5.92.55l6.1 25.6c.65 2.72 4.26 3.3 5.72.92l8.26-13.42c1.44-2.33 4.96-1.83 5.7.8l8.07 29.07H96Z" fill="#02614E"></path><path d="M0 410h218l-9.65-26.54a39.431 39.431 0 0 0-23.85-23.68l-51.05-18.15a39.436 39.436 0 0 1-25.57-30.02L102 279.66a39.44 39.44 0 0 0-24.53-29.63L0 220v190Z" fill="#686E72"></path><path d="M0 410h88c-3.73-11.18-7.46-22.37-11.18-33.55-.94-2.82-4.9-2.89-5.95-.11-1.91 5.11-3.83 10.21-5.74 15.32-1.04 2.78-5.01 2.71-5.95-.11l-8.86-26.59c-.88-2.63-4.47-2.93-5.78-.49-3.13 5.87-6.26 11.73-9.39 17.6-1.26 2.36-4.69 2.18-5.7-.29-4.13-10.09-8.26-20.18-12.38-30.27-1.09-2.66-4.88-2.6-5.88.1C7.46 361.74 3.73 371.87 0 381.99V410Z" fill="#02614E"></path><path d="m636.01 410 36.48-43.78c14.28-17.14 37.37-24.17 58.78-17.92l59.17 17.3c21.57 6.3 44.82-.88 59.06-18.26l53.45-65.19c3.24-3.95 7.88-6.51 12.95-7.15l16.59-2.07a51.1 51.1 0 0 1 40.94 13.11L1108 409.99H636l.01.01Z" fill="#818990"></path><path d="m1279.24 295.49-12.18 41.97c-.91 3.13-5.33 3.17-6.29.05l-9.05-29.41c-1-3.24-5.64-3.03-6.35.28l-9.35 44.07c-.65 3.08-4.84 3.56-6.18.72l-7.92-16.84c-1.31-2.79-5.41-2.39-6.15.6l-5.64 22.58c-.74 2.94-4.73 3.4-6.11.7l-15.16-29.66c-1.36-2.67-5.3-2.26-6.09.63l-7.07 25.92c-.84 3.08-5.14 3.27-6.25.27l-6.49-17.62c-1.14-3.1-5.62-2.76-6.29.47l-6.46 31.11c-.66 3.18-5.05 3.57-6.26.55l-12.18-30.46c-1.18-2.96-5.46-2.67-6.23.42l-8.87 35.48c-.79 3.16-5.21 3.36-6.28.28l-8.77-25.21c-1.07-3.08-5.49-2.88-6.28.28l-6.1 24.4c-.77 3.09-5.05 3.38-6.23.42l-7.67-19.18c-1.14-2.84-5.19-2.72-6.16.18l-10.21 30.62c-.98 2.94-5.12 3.01-6.19.1l-7.89-21.41c-1.03-2.79-4.95-2.88-6.1-.14l-9.33 22.17c-1.18 2.81-5.22 2.63-6.15-.27l-12.04-37.45c-.99-3.07-5.35-3.02-6.27.07l-10.43 35.2c-.87 2.93-4.93 3.19-6.15.38l-7.13-16.3c-1.18-2.71-5.06-2.59-6.09.18l-7.76 21.07c-1.09 2.96-5.33 2.83-6.23-.2-3.37-11.38-6.74-22.76-10.12-34.15-.92-3.11-5.32-3.14-6.28-.04-3.9 12.55-7.79 25.1-11.69 37.65-.95 3.07-5.3 3.08-6.26.02l-6.47-20.48c-.88-2.78-4.68-3.12-6.04-.53l-18.34 35.01h404v-76l-14.53-38.75c-1.11-2.96-5.34-2.8-6.22.24l-.02.01Z" fill="#02614E"></path><path d="M576 186c35.346 0 64-28.654 64-64 0-35.346-28.654-64-64-64-35.346 0-64 28.654-64 64 0 35.346 28.654 64 64 64Z" fill="#EAD1C1"></path><path d="M576 170c26.51 0 48-21.49 48-48s-21.49-48-48-48-48 21.49-48 48 21.49 48 48 48Z" fill="#fff"></path><path d="m264.3 269.34 4.38 12.32c11.72 32.97 41.95 55.78 76.87 58.01a87.466 87.466 0 0 0 63.73-21.95l4.15-3.69a12.71 12.71 0 0 0-6.82-2.37l-55.29-2.51c-15.35-.7-28.79-10.52-34.11-24.93l-30.7-83.14c-5.19-14.05-18.11-23.78-33.05-24.87l-33.65-2.46a38.223 38.223 0 0 1-32.69-23.92l-12.8-31.99a6.822 6.822 0 0 0-3.17-3.51l-10.98 32.29c-11.16 32.84 6.32 68.52 39.11 79.83l33.29 11.48a51.472 51.472 0 0 1 31.72 31.41h.01Z" fill="#9FA5AB"></path><path d="M51.84 244.38a39.431 39.431 0 0 1 16.74 34.63l-1.91 32.43a39.42 39.42 0 0 0 17.67 35.25l45.23 29.81a39.47 39.47 0 0 1 17.51 28.69l.52 4.8h70.52l-9.65-26.54a39.431 39.431 0 0 0-23.85-23.68l-51.05-18.15A39.436 39.436 0 0 1 108 311.6l-5.89-31.95a39.44 39.44 0 0 0-24.53-29.63L38 234.67l13.84 9.7v.01Z" fill="#818990"></path><path d="m756.08 443.99.04.01-.04-.01Z" fill="#686E72"></path><path opacity=".8" d="m790.66 365.67 39.39 11.51c21.9 6.4 45.55.69 62.12-14.99a64.199 64.199 0 0 0 19.25-56.93l-4.38-26.98a19.967 19.967 0 0 0-4.21 3.85l-53.45 65.19a56.03 56.03 0 0 1-58.71 18.35h-.01ZM706 388c-.24-15.7 16.55-32.5 41.81-34.86l-16.54-4.84c-21.41-6.26-44.5.78-58.78 17.92L636.01 410H718c-3.29-2.83-11.83-10.97-12-22Z" fill="#9FA5AB"></path><path d="M416.96 410a27.009 27.009 0 0 0 17.23 10.44l74.31 12.16c4.49.73 4.13 7.3-.41 7.54l-90.19 4.96c-4.91.27-4.9 7.51.01 7.77l95.5 4.97c4.71.25 5.01 7.08.34 7.74l-77.82 10.96c-4.62.65-4.39 7.4.27 7.73L558.37 493c6.93.49 7.28 10.54.41 11.52l-26.87 3.84c-4.68.67-4.34 7.53.38 7.74l118.58 5.33c4.61.21 5.09 6.85.55 7.71l-30.86 5.88c-4.44.85-4.11 7.31.39 7.7l41.36 3.57c37.51 3.23 75.27 1.58 112.35-4.93l42.85-7.52c4.39-.77 4.25-7.11-.17-7.69l-88.29-11.52c-4.63-.6-4.47-7.35.18-7.74l70.24-5.77c4.8-.39 4.75-7.44-.06-7.76l-63.91-4.32c-4.75-.32-4.88-7.25-.15-7.75l112.28-11.82c4.77-.5 4.58-7.51-.2-7.76l-91.17-4.75c-6.25-.33-6.45-9.48-.22-10.08l30.04-2.91c4.65-.45 4.7-7.22.06-7.74l-52.89-5.97c-4.63-.52-4.44-7.31.22-7.57l58.3-3.24c9.03-.5 17.68-3.81 24.74-9.46H416.94l.02.01Z" fill="#63B5B1"></path><path d="M0 478c15.69 2.92 39.93 5.53 68 0 42.62-8.4 48.21-26.53 84-34 45.2-9.43 57.35 15.07 114 14 9.94-.19 18.2-1.11 25.64-2.55 36.52-7.09 62.17-18.56 68.36-21.45 22.81-10.63 66.5-17.19 157.8-.42 67.4-3.19 134.8-6.39 202.2-9.58 6.3-.79 18.55-2.14 33.98-2.49 57.4-1.32 91.51 12.68 158.02 16.49 17.53 1 29.44.78 43.36-1.93 24.93-4.85 34.21-15.04 78.64-12.07 71.18 4.75 89.94 33.73 158 38 45.51 2.86 83.37-7.2 108-16v-36H0v68Z" fill="#63B5B1"></path><path opacity=".5" d="m425.74 101.25 12.14 6.54a6.7 6.7 0 0 0 6.98-.39l10.76-7.46c1.24-.86.32-2.8-1.13-2.37l-10.43 3.05c-2.24.65-4.6.76-6.89.32l-10.59-2.06c-1.44-.28-2.14 1.69-.85 2.38l.01-.01ZM729.78 162.53l11.66 7.35a6.686 6.686 0 0 0 6.99.09l11.25-6.7c1.3-.77.51-2.77-.97-2.44l-10.61 2.32c-2.28.5-4.64.45-6.89-.15l-10.42-2.78c-1.42-.38-2.25 1.54-1.01 2.32v-.01Z" fill="#964F48"></path><path opacity=".75" d="m656.07 194.86 16.65 2.66a8.18 8.18 0 0 0 7.91-3.26l9.43-12.95c1.09-1.49-.76-3.36-2.26-2.28l-10.82 7.72a17.873 17.873 0 0 1-7.83 3.14l-13.06 1.89c-1.78.26-1.79 2.81-.02 3.09v-.01Z" fill="#964F48"></path><path d="m695.71 113.63 12.93 12.86a8.834 8.834 0 0 0 9 2.13l16.46-5.4c1.9-.62 1.46-3.42-.54-3.43l-14.37-.06c-3.08-.01-6.12-.77-8.85-2.19l-12.65-6.6c-1.72-.9-3.35 1.33-1.98 2.7v-.01Z" fill="#964F48"></path><path d="M894.938 386.359c-13.528-2.239-26.508 6.204-29.834 19.39l-4.757 17.749a44.424 44.424 0 0 0 0 21.713c2.119 8.43 8.757 15.009 17.26 17.109 5.908 1.461 9.304 7.609 7.381 13.326L877.172 499h37.145L920 420.202l-25.076-33.857.014.014Z" fill="#E8BE9E"></path><path d="m911 466 7.311 29.252L920.224 506h6.612L929 466h-18Z" fill="#EA9A81"></path><path d="m865.215 624.829-52.827-51.996c-9.913-9.757-23.901-14.346-37.776-12.39-17.18 2.412-31.364 14.429-36.348 30.788l-11.005 36.107c-1.162 3.817 1.736 7.662 5.796 7.662h127.89c5.39 0 8.079-6.408 4.27-10.157v-.014Z" fill="#2E5157"></path><path d="m744.04 632.85 10.992-36.111c4.979-16.36 19.145-28.379 36.305-30.791a44.677 44.677 0 0 1 11.663-.096 45.066 45.066 0 0 0-28.445-5.417c-17.159 2.412-31.326 14.431-36.305 30.791l-10.992 36.111c-1.16 3.818 1.735 7.663 5.79 7.663h10.754a6.013 6.013 0 0 1 .238-2.15Z" fill="#3C7980"></path><path d="M819.933 546c-1.406 3.619-2.617 7.307-3.55 11.063L797 635h29.492L857 572.915 819.947 546h-.014Z" fill="#E8BE9E"></path><path d="M954.273 598.986a80.22 80.22 0 0 0 35.466-32.084l7.624-12.954c18.687-31.722 5.937-72.604-27.437-88.137-10.528-4.895-16.993-15.715-15.932-27.26l2.164-23.732c1.215-13.275-2.904-26.619-11.897-36.463-14.856-16.286-38.649-19.911-57.472-9.467l-14.075 7.808c-7.386 4.099-10.612 12.995-7.582 20.86l10.515 27.315a107.614 107.614 0 0 0 52.375 57.601c19.256 9.621 25.469 34.078 13.112 51.689l-19.688 28.083L954.259 599l.014-.014Z" fill="#6E3A35"></path><path opacity=".75" d="m938.181 562.986 19.499-27.951c12.225-17.529 6.085-41.871-12.986-51.448-23.813-11.949-42.317-32.392-51.873-57.332l-10.413-27.188c-3.001-7.827.207-16.681 7.509-20.762l13.94-7.772c5.781-3.22 12.031-5.065 18.351-5.634-11.685-3.442-24.533-2.249-35.637 3.941l-13.94 7.772c-7.316 4.08-10.51 12.935-7.509 20.762l10.413 27.188c9.556 24.94 28.059 45.383 51.873 57.332 19.07 9.576 25.224 33.919 12.986 51.448l-19.5 27.951L938.181 563v-.014Z" fill="#AF5947"></path><path d="M973.436 592.368c-.621-16.691-4.045-32.654-9.993-47.368L934 574.442 951.167 635H975l-1.579-42.632h.015Z" fill="#E8BE9E"></path><path d="M969 559.741c-1.419-5.037-3.082-9.964-5.059-14.741L934 574.442 951.457 635h15.665l-12.598-43.703c-2.408-8.359 0-17.322 6.307-23.526l8.155-8.016.014-.014Z" fill="#EA9A81"></path><path d="M945.231 561.25 962 543.979c-6.536-16.619-16.174-31.641-28.581-44.303-7.366-7.511-17.655-11.676-28.926-11.676h-18.002c-9.568 0-19.303 2.999-27.874 8.566-18.154 11.815-32.126 29.128-39.617 48.635l24.108 21.339c4.32 4.318 5.456 10.898 2.852 16.424L824.137 635h105.447l2.575-45.039c.596-10.398 5.29-20.714 13.072-28.725v.014Z" fill="#02614E"></path><path opacity=".25" d="M962 543.948c-6.397-16.622-15.83-31.647-27.974-44.311-6.804-7.096-16.17-11.207-26.47-11.637l12.022 40.048a99.609 99.609 0 0 1 1.125 53.129L907 635h23.271l2.521-45.047c.583-10.401 5.178-20.718 12.795-28.731L962 543.948Z" fill="#142924"></path><path d="M863.006 501.368c4.692-5.373 10.126-9.885 15.994-13.368-6.919 1.213-13.739 3.892-19.93 7.953-18.361 12-32.493 29.585-40.07 49.397L834.35 559c4.314-20.94 14.16-41.035 28.656-57.618v-.014Z" fill="#00735C"></path><path d="M494 630.718v-51.341c0-9.728 7.693-17.945 18.007-19.234l144.139-17.973c9.282-1.15 18.229 3.63 21.867 11.695l37.366 82.95c2.467 5.488 2.104 11.738-.99 16.948l-18.578 31.262c-3.791 6.374-11.066 10.213-18.857 9.964l-145.714-4.698c-8.223-.263-15.498-5.044-18.55-12.181l-17.199-40.214a18.377 18.377 0 0 1-1.477-7.206l-.014.028Z" fill="#975D48"></path><path d="M471 632.718v-51.341c0-9.728 7.693-17.946 18.007-19.234l144.139-17.973c9.282-1.15 18.229 3.63 21.867 11.695l37.366 82.95c2.467 5.488 2.104 11.738-.99 16.948l-18.578 31.262c-3.791 6.375-11.066 10.213-18.857 9.964l-145.714-4.698c-8.223-.263-15.498-5.044-18.55-12.181l-17.199-40.214a18.376 18.376 0 0 1-1.477-7.205l-.014.027Z" fill="#BF8563"></path><path opacity=".5" d="M557.941 687.156 541.061 556 517 559.089l16.664 129.508a6.902 6.902 0 0 0 2.899 4.807l18.113.596a6.439 6.439 0 0 0 1.639-1.358 7.008 7.008 0 0 0 1.626-5.472v-.014ZM636.059 691.273a6.993 6.993 0 0 0 6.569 5.351l11.133.376h.238c2.157 0 4.16-.961 5.49-2.647 1.331-1.686 1.821-3.846 1.317-5.922L626.662 545 602 548.079c.028.223.07.46.126.683l33.919 142.497.014.014Z" fill="#975D48"></path><path d="M530.223 558.016c-.468-3.43-3.489-6.016-7.021-6.016-.312 0-.624.014-.936.055l-11.106 1.439c-3.872.497-6.609 3.982-6.099 7.758l17.46 129.359c.454 3.36 3.305 5.891 6.794 6.002l11.347.387h.241a7.18 7.18 0 0 0 5.333-2.351 6.778 6.778 0 0 0 1.702-5.462l-17.701-131.185-.014.014ZM648.837 690.47l-33.746-144.113c-.743-3.159-3.495-5.357-6.686-5.357-.303 0-.606.014-.908.056l-10.524 1.419a6.902 6.902 0 0 0-4.76 2.95 7.061 7.061 0 0 0-1.032 5.552L624.5 693.281c.716 3.047 3.371 5.246 6.452 5.343l10.937.376h.234c2.119 0 4.086-.96 5.393-2.644a6.97 6.97 0 0 0 1.293-5.913l.028.027Z" fill="#6D493C"></path><path d="m1137.25 392.823-26.98-23.175c-7.2-6.174-17.37-7.453-25.7-3.01-9.63 5.133-17 14.246-19.86 25.482l-.37 1.491a109.471 109.471 0 0 0-2.37 41.372c.61 4.515 2.69 8.691 5.92 11.841a19.422 19.422 0 0 0 10.87 5.358l10.65.717c4.08.802 6.57 5.035 5.34 9.071 0 0-1.85 6.089-3.45 11.335 9.59 3.796 19.46 5.695 29.33 5.695 9.21 0 18.42-1.688 27.37-4.978-4.93-5.949-8.17-15.315-7.51-21.84l4.9-38.011c1.04-8.058-2.03-16.102-8.12-21.348h-.02Z" fill="#975D48"></path><path opacity=".5" d="M1131.49 470.042 1148 473c-4.98-5.792-8.26-14.926-7.59-21.265l4.95-37.013-6.6-10.722-11.98 45.078c-1.95 7.326-.18 15.117 4.73 20.951l-.02.013Z" fill="#6D493C"></path><path d="m1161.96 402.99-1.18-25.362c-.87-13.77-11.14-25.419-24.75-27.027-3.17-.375-6.19-.194-8.75.61a20.941 20.941 0 0 1-17.26-2.163l-5.88-3.633a29.637 29.637 0 0 0-34.75 2.634l-.09.083c-4.16 3.842-6.73 9.125-7.23 14.797-.58 6.683 2.38 13.173 7.65 17.167 1.61 1.22 3.05 2.635 4.36 4.174 4.29 5.075 6.5 11.551 6.67 18.207.05 2.177-.06 4.119-.33 5.464l-.22 1.081c-.68 3.231 1.65 6.31 4.92 6.546.35.027.71 0 1.08-.07 1.77-.346 3.01-1.872 3.38-3.647 1.1-5.283 4.92-9.166 9.46-9.166 5.42 0 9.8 5.519 9.8 12.328 0 3.564-1.2 6.767-3.13 9.014-3.49 4.076-3.46 10.22-.15 14.449a18.682 18.682 0 0 0 6.31 5.158c2.54 1.29 5.35 1.886 8.19 1.983l12.66.375a18.64 18.64 0 0 0 15.57-7.585l5.41-7.378c.4-.554.8-1.109 1.17-1.678 5.15-7.737 7.45-17.042 7.09-26.361Z" fill="#142924"></path><path opacity=".25" d="m1077.42 364.743.1-.081c10.97-8.995 20.24-10.145 32.47-2.854l6.57 3.923a24.105 24.105 0 0 0 19.29 2.34c8.85-2.705 15.65-2.056 24.15 1.366-3.43-10.064-12.34-17.801-23.47-19.072-3.19-.365-6.22-.189-8.8.595-5.84 1.772-12.17 1.001-17.38-2.11l-5.92-3.544c-11.02-6.574-25.12-5.546-35 2.57l-.08.081c-4.19 3.747-6.78 8.9-7.28 14.433-.57 6.452 2.34 12.714 7.53 16.61a24.355 24.355 0 0 1 7.84-14.257h-.02Z" fill="#6B7177"></path><path d="M1217 571.844 1249.18 541l39.82 86.272-33.9 2.728-38.1-58.156ZM1056 584.222 1017.4 562a1983.872 1983.872 0 0 0-23.4 95.638c10.25 3.375 20.39 6.833 29.06 10.362l32.93-83.778h.01Z" fill="#975D48"></path><path d="M1072.4 481.732c-10.04 5.728-19.03 13.161-26.38 22.088-9.86 11.945-17.59 25.259-23.14 39.356-.23.559-.45 1.118-.66 1.677-2.44 6.231-4.63 10.506-6.22 16.989l21.32 15.409 25.26 3.647 5.59-10.66c.94 29.116-5.2 55.646-4.13 84.762a2012.614 2012.614 0 0 1 160.89-.489c-5.34-33.475-14.87-64.406-21.41-97.839 3.65 4.764 5.87 10.716 9.44 15.494 7.25-.307 14.51-.573 21.76-.796 4.69-7.545 14.45-18.791 19.28-26.308-3.98-6.077-8.01-12.126-12.11-18.176-14.09-18.986-32.73-34.927-54.82-46.691L1158.58 473a92.251 92.251 0 0 1-8.45 4.596c-11.71 5.631-24.18 8.662-36.77 8.872-13.42.21-23.58-1.649-35.83-7.684l-5.14 2.934.01.014Z" fill="#DE6A5A"></path><path opacity=".1" d="M1068.87 495.403c.13-.111.25-.222.38-.319a567.35 567.35 0 0 1 3.56-3.133 84.583 84.583 0 0 1 10.19-7.624c-2.8-.957-5.55-2.093-8.25-3.327l-2.69 1.539c-9.98 5.683-18.91 13.058-26.22 21.916-9.8 11.852-17.49 25.063-23 39.05-.23.555-.45 1.109-.66 1.664-2.42 6.182-4.6 10.424-6.18 16.856l8.28 5.975c1.45-5.24 3.17-10.425 5.2-15.498.22-.569.44-1.137.68-1.691 8.29-20.78 21.24-39.868 38.74-55.394l-.03-.014Z" fill="#F7E1D5"></path><path d="M1241.86 527.309c-12.03-16.169-27.39-30.133-45.37-41.182-5.07-3.111-10.38-5.817-15.86-8.147l-18.69-7.98c-2.77 1.688-10.08 8.273-12.94 9.64l3.38 1.186c22.55 28.236 32.78 65.902 28.39 101.741L1172.64 649c10.58-.098 40.7-.112 51.29-.056-4.9-30.231-13.89-57.923-19.77-88.112 3.4 3.488 5.38 8.161 8.72 11.663 13.51-.572 30.99-11.342 38.17-22.488l2.95-4.576a1284.8 1284.8 0 0 0-12.13-18.15l-.01.028Z" fill="#CD5747"></path><path d="m1016.92 560.014-3.44 10.32a9.342 9.342 0 0 0 4.04 10.964c8.09 4.899 20.37 10.238 30.03 12.461 4.07.947 8.27-.961 10.32-4.57l5.13-8.989c-15.69-1.825-36.49-10.127-46.06-20.2l-.02.014Z" fill="#F7E1D5"></path><path d="M1252.85 546c-10.61 12.254-28.02 23.477-41.85 27.046 2.09 2.872 4.61 5.897 6.95 8.867 2.19 2.76 5.95 3.806 9.29 2.579 9.06-3.332 22.49-12.059 30.14-19.016 2.83-2.579 3.46-6.762 1.44-9.982a2476.29 2476.29 0 0 0-5.97-9.494Z" fill="#E8BE9E"></path><path d="M1151.47 463.304a9.745 9.745 0 0 0-7.1.895c-9.8 5.395-20.34 8.334-30.94 8.519-6.92.113-13.83-.952-20.49-3.138a9.678 9.678 0 0 0-7.26.483l-7.99 6.02c-2.57 1.931-2.13 6.048.79 7.326 11.04 4.813 23.7 7.78 35.06 7.582 8.67-.142 18.38-2.088 27.36-5.225 6.1-2.13 11.8-5.381 16.9-9.499l3.7-2.996c2.4-1.931 1.82-5.835-1.02-6.928-3.03-1.164-6.53-2.428-9.01-3.053v.014Z" fill="#F7E1D5"></path><path d="m1063 639 11.11-8.488c9.33-17.356 11.3-40.094 9.03-61.118-.74-6.9-9.93-8.797-13.43-2.796l-1.71 2.923-5 69.479Z" fill="#CD5747"></path><path d="M1160.44 466.42c-3.09-1.186-6.66-2.473-9.18-3.11a9.973 9.973 0 0 0-7.25.911 70.47 70.47 0 0 1-13.01 5.569c8.12 1.75 15.11 5.497 20.34 11.21a60.322 60.322 0 0 0 6.36-4.484l3.77-3.052c2.44-1.967 1.86-5.945-1.04-7.059l.01.015Z" fill="#E8BE9E"></path><path d="M318.148 584.026 389.152 730H1300V612.215l-113.51 12.627a1077.374 1077.374 0 0 1-158.28 5.902L622.569 616.03a1076.718 1076.718 0 0 1-207.552-27.898l-84.334-19.823c-9.117-2.144-16.635 7.28-12.535 15.717Z" fill="#142924"></path><path opacity=".25" d="M1186.49 624.842a1077.374 1077.374 0 0 1-158.28 5.902L622.569 616.03a1079.098 1079.098 0 0 1-173.044-20.394 1049.917 1049.917 0 0 1-34.508-7.504l-84.334-19.823c-9.117-2.144-16.635 7.28-12.535 15.717L389.152 730h126.889l-41.958-86.254c-5.907-12.139 4.267-25.948 17.567-23.819a1079.754 1079.754 0 0 0 130.919 12.808l405.641 14.714c52.84 1.921 105.74-.056 158.28-5.902L1300 628.92v-16.705l-113.51 12.627Z" fill="#6B7177"></path></g><defs><clipPath id="clip0_779_1238"><path fill="#fff" d="M0 0h1300v730H0z"></path></clipPath></defs></svg>'
        ];
        
        // Remover extensão .svg para checagem na array de fallback
        $baseInput = preg_replace('/\.svg$/i', '', $input);
        
        // Tentar usar um placeholder pré-definido
        if (isset($placeholders[$baseInput])) {
            $svg = $placeholders[$baseInput];
        } else {
            // Gerar um placeholder genérico com o nome da SVG
            $svg = "<svg class=\"placeholder-svg\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 525 525\"><rect width=\"525\" height=\"525\" fill=\"#F6F6F6\"/><text x=\"50%\" y=\"50%\" text-anchor=\"middle\" dy=\"0.3em\" fill=\"#A4A4A4\">{$input}</text></svg>";
        }
        
        // Adicionar classe extra se fornecida
        if (!empty($class) && $class !== 'placeholder-svg') {
            $svg = str_replace('class="placeholder-svg"', 'class="placeholder-svg ' . $class . '"', $svg);
        }
        
        return $svg;
    }

    /**
     * Filtro para tradução de textos - Versão melhorada
     */
    public function t($input, $params = [])
    {
        // Ignorar valores nulos ou vazios
        if ($input === null || $input === '') {
            return '';
        }
        
        // Converter para string se não for
        if (!is_string($input)) {
            $input = (string)$input;
        }
        
        // Verificar se precisamos remover o prefixo t:
        if (strpos($input, 't:') === 0) {
            $key = substr($input, 2);
        } else {
            $key = $input;
        }
        
        // Verificar se temos traduções no contexto
        if (!isset($this->context->registers['translations'])) {
            return $key;
        }
        
        $translations = $this->context->registers['translations'];
        $parts = explode('.', $key);
        
        // Processo de lookup da tradução
        $value = $translations;
        foreach ($parts as $part) {
            if (!isset($value[$part])) {
                // Chave não encontrada
                return $key;
            }
            $value = $value[$part];
        }
        
        // Se o resultado não for string, retorna a chave original
        if (!is_string($value)) {
            return $key;
        }
        
        // Processar substituições de parâmetros
        if (!empty($params)) {
            foreach ($params as $paramKey => $paramValue) {
                $value = str_replace("{{ {$paramKey} }}", $paramValue, $value);
            }
        }
        
        return $value;
    }

     /**
     * Aplica parâmetros em string de tradução
     */
    private function applyParams($string, $params = [])
    {
        if (empty($params)) {
            return $string;
        }
        
        foreach ($params as $key => $value) {
            $string = str_replace("{{ $key }}", $value, $string);
        }
        
        return $string;
    }

    /**
     * Alias para o filtro t()
     */
    public function translate($input, $params = [])
    {
        return $this->t($input, $params);
    }


    /**
     * Filtro structured_data - Gera marcação JSON-LD schema.org para produtos
     * 
     * @param mixed $product O objeto do produto
     * @return string JSON-LD formatado para o produto
     */
    public function structured_data($product)
    {
        // Se não for um produto ou estiver vazio, retornar objeto vazio
        if (empty($product) || !is_array($product)) {
            return '{}';
        }
        
        try {
            // Obter dados da loja do contexto
            $shop = $this->context->get('shop');
            $shopName = $shop['name'] ?? '';
            $shopDomain = $shop['domain'] ?? request()->getHost();
            
            // Criar URL base do produto com handle completo
            $productHandle = $product['handle'] ?? '';
            $baseUrl = 'https://' . $shopDomain;
            $productPath = '/products/' . $productHandle;
            $productUrl = $baseUrl . $productPath;
                
            // Obter variante selecionada ou primeira disponível
            $variant = null;
            $variantId = null;
            if (isset($product['selected_or_first_available_variant'])) {
                $variant = $product['selected_or_first_available_variant'];
                $variantId = $variant['id'] ?? null;
            } elseif (!empty($product['variants'])) {
                $variant = $product['variants'][0];
                $variantId = $variant['id'] ?? null;
            }
            
            // Obter preço e disponibilidade da variante
            $price = $variant['price'] ?? $product['price'] ?? '0.00';
            $available = $variant['available'] ?? $product['available'] ?? false;
            $availability = $available ? 'http://schema.org/InStock' : 'http://schema.org/OutOfStock';
            
            // Obter imagem do produto
            $image = '';
            if (!empty($product['featured_image']['src'])) {
                $image = $product['featured_image']['src'];
            } elseif (!empty($product['featured_image']) && is_string($product['featured_image'])) {
                $image = $product['featured_image'];
            } elseif (!empty($product['images']) && isset($product['images'][0]['src'])) {
                $image = $product['images'][0]['src'];
            }
            
            // Limpar descrição (remover HTML)
            $description = '';
            if (!empty($product['description'])) {
                $description = strip_tags($product['description']);
            } elseif (!empty($product['body_html'])) {
                $description = strip_tags($product['body_html']);
            }
            
            // Construir a estrutura schema.org na ordem exata do exemplo
            $schemaData = [
                '@context' => 'http://schema.org/',
                '@id' => $productPath . '#product',
                '@type' => 'Product',
                'brand' => [
                    '@type' => 'Brand',
                    'name' => $shopName
                ],
                'category' => $product['type'] ?? '',
                'description' => $description,
                'image' => $image,
                'name' => $product['title'] ?? ''
            ];
            
            // Adicionar oferta específica da variante se disponível
            if ($variant && $variantId) {
                $variantQueryParam = '?variant=' . $variantId;
                
                $schemaData['offers'] = [
                    '@id' => $productPath . $variantQueryParam . '#offer',
                    '@type' => 'Offer',
                    'availability' => $availability,
                    'price' => $price,
                    'priceCurrency' => $shop['currency'] ?? 'BRL',
                    'url' => $productUrl . $variantQueryParam
                ];
            }
            
            // Adicionar URL do produto por último como no exemplo
            $schemaData['url'] = $productUrl;
            
            // Retornar JSON com barras escapadas para corresponder ao formato do exemplo
            return json_encode($schemaData);
        
        } catch (\Exception $e) {
            // Registrar erro mas não quebrar a página
            \Log::error('structured_data filter error', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            
            // Retornar objeto vazio em caso de erro
            return '{}';
        }
    }

    /**
     * stylesheet_tag filter - Gera tags <link> para CSS com media print/preload otimizado
     * Agora com verificação para evitar carregar o mesmo stylesheet múltiplas vezes
     */
    public function stylesheet_tag($input)
    {
        if (empty($input)) return '';
        
        // Se input já tiver a estrutura da tag link, retornar como está
        if (strpos($input, '<link') === 0) {
            return $input;
        }
        
        // Check if this stylesheet has already been loaded
        if ($this->isResourceLoaded('stylesheet', $input)) {
            // Return an empty comment for debugging
            return "<!-- Stylesheet already loaded: {$input} -->";
        }
        
        // Gerar tag link otimizada
        return sprintf(
            '<link rel="stylesheet" href="%s" media="print" onload="this.media=\'all\'">',
            htmlspecialchars($input, ENT_QUOTES)
        );
    }

    public function money($input, $param = null)
    {
        if (empty($input) || !is_numeric($input)) {
            return '';
        }
        
        // Converte para float e divide por 100 (preços são armazenados em centavos)
        $value = (float)$input / 100;
        
        // Configurações de localização (assumindo Brasil como default)
        $locale = $this->context->get('locale') ?? 'pt-BR';
        $currency = $this->context->get('shop.currency') ?? 'BRL';
        
        // Formatação com símbolo da moeda
        switch ($currency) {
            case 'BRL':
                return 'R$ ' . number_format($value, 2, ',', '.');
            case 'USD':
                return '$ ' . number_format($value, 2, '.', ',');
            case 'EUR':
                return '€ ' . number_format($value, 2, ',', '.');
            default:
                return '$' . number_format($value, 2, '.', ',');
        }
    }

    /**
     * Filtro money_with_currency - Formata um número como moeda com o código
     */
    public function money_with_currency($input, $param = null)
    {
        if (empty($input) || !is_numeric($input)) {
            return '';
        }
        
        // Obter o código de moeda e formatar com money
        $currency = $this->context->get('shop.currency') ?? 'BRL';
        $moneyValue = $this->money($input);
        
        // Concatenar com o código da moeda
        return $moneyValue . ' ' . $currency;
    }

    /**
     * inline_asset_content filter - Versão melhorada
     * Obtém conteúdo de um arquivo SVG ou outro asset
     * Agora verifica se o asset já foi carregado inline
     */
    public function inline_asset_content($input)
    {
        try {
            // Validar input
            if (empty($input) || (!is_string($input) && !is_scalar($input))) {
                Log::warning('inline_asset_content: input inválido', [
                    'input_type' => gettype($input)
                ]);
                return '';
            }
            
            // Converter para string se não for
            if (!is_string($input)) {
                $input = (string)$input;
            }
            
            // Check if this asset has already been inlined
            if ($this->isResourceLoaded('inline_asset', $input)) {
                // Return an empty comment for debugging
                return "<!-- Asset already inlined: {$input} -->";
            }
            
            // Get theme context data
            $theme = $this->context->get('theme');
            
            // Se não houver dados de tema ou estiverem incompletos
            if (empty($theme) || !isset($theme['store_id']) || !isset($theme['id'])) {
                $storeId = request()->route('store_id') ?? '1';
                $themeId = request()->route('theme_id') ?? '176208380215';
            } else {
                $storeId = $theme['store_id'];
                $themeId = $theme['id'];
            }
            
            // Usar o disco de temas específico
            $themeDisk = Storage::disk('themes');
            
            // Caminho completo para o arquivo
            $assetName = basename(trim($input, '/'));
            $assetPath = "{$storeId}/{$themeId}/assets/{$assetName}";
            
            // Verificar se o arquivo existe
            if ($themeDisk->exists($assetPath)) {
                // Ler o conteúdo do arquivo
                $content = $themeDisk->get($assetPath);
                
                // Para SVGs, verificar se o conteúdo é válido (contém tag <svg>)
                if (preg_match('/\.svg$/i', $assetName)) {
                    if (stripos($content, '<svg') !== false) {
                        // O conteúdo é um SVG válido em texto, retornar diretamente
                        return $content;
                    } else {
                        Log::warning('inline_asset_content: SVG inválido', [
                            'assetPath' => $assetPath
                        ]);
                        
                        // Tentar regenerar a URL do asset
                        $assetUrl = url("assets/{$storeId}/{$themeId}/{$assetName}");
                        return "<img src=\"{$assetUrl}\" alt=\"\" />";
                    }
                }
                
                // Para outros tipos de arquivo, retornar o conteúdo diretamente
                return $content;
            }
            
            // Verificar em diretório alternativo
            $snippetPath = "{$storeId}/{$themeId}/snippets/{$assetName}";
            if ($themeDisk->exists($snippetPath)) {
                return $themeDisk->get($snippetPath);
            }
            
            // Se não encontrou o arquivo, gerar URL para imagem
            $assetUrl = url("assets/{$storeId}/{$themeId}/{$assetName}");
            
            Log::warning('Asset não encontrado:', [
                'input' => $input,
                'assetPath' => $assetPath,
                'fallbackUrl' => $assetUrl
            ]);
            
            if (preg_match('/\.(svg|png|jpg|jpeg|gif)$/i', $assetName)) {
                return "<img src=\"{$assetUrl}\" alt=\"\" />";
            }
            
            return "<!-- Asset '{$assetName}' não encontrado -->";
            
        } catch (\Exception $e) {
            Log::error('Erro no filtro inline_asset_content:', [
                'input' => $input,
                'erro' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            
            return "<!-- Erro ao incluir asset: {$input} ({$e->getMessage()}) -->";
        }
    }

    private function determineFontFormat($params): string
    {
        // Default to woff if no params
        if (empty($params)) {
            return 'woff';
        }
        
        // Handle string parameter
        if (is_string($params)) {
            // If it's 'woff2', return woff2
            if (strtolower(trim($params)) === 'woff2') {
                return 'woff2';
            }
            // Check if it's an object-like string representation
            if (strpos($params, 'woff2') !== false) {
                return 'woff2';
            }
        }
        
        // Handle array parameter
        if (is_array($params)) {
            // Look for woff2 key
            if (isset($params['woff2']) && $params['woff2']) {
                return 'woff2';
            }
            // If there's a string value indicating woff2
            if (in_array('woff2', $params, true)) {
                return 'woff2';
            }
        }
        
        // Default to woff
        return 'woff';
    }

    public function font_face($input, $params = '') 
    {
        // Se input não for array nem string, retornar vazio
        if (!is_array($input) && !is_string($input)) {
            return '';
        }
        
        // Se for string (ex: "assistant_n4"), converter para array de informações
        if (is_string($input)) {
            $parts = explode('_', $input);
            $family = $parts[0] ?? '';
            $weight = 400;
            $style = 'normal';
            
            if (isset($parts[1])) {
                if (substr($parts[1], 0, 1) === 'n') {
                    $weight = intval(substr($parts[1], 1)) * 100;
                } elseif (substr($parts[1], 0, 1) === 'i') {
                    $style = 'italic';
                    $weight = intval(substr($parts[1], 1)) * 100;
                }
            }
            
            $font = [
                'family' => ucfirst($family),
                'weight' => $weight,
                'style' => $style
            ];
        } else {
            $font = $input;
        }
        
        // Extrair parâmetros do font_face
        $fontDisplay = 'swap';
        if (!empty($params)) {
            // Se $params for um array, verificar se tem a chave 'font_display'
            if (is_array($params)) {
                $fontDisplay = $params['font_display'] ?? 'swap';
            } 
            // Se for string, usar regex para extrair
            elseif (is_string($params) && strpos($params, 'font_display:') !== false) {
                preg_match("/font_display:\s*['\"]?([^'\";\s]+)/", $params, $matches);
                if (isset($matches[1])) {
                    $fontDisplay = $matches[1];
                }
            }
        }
        
        // Preparar informações da fonte
        $family = $font['family'] ?? 'sans-serif';
        $weight = $font['weight'] ?? 400;
        $style = $font['style'] ?? 'normal';
        
        // Determinar o modificador de estilo para o nome do arquivo
        $styleModifier = $style === 'italic' ? 'i' : 'n';
        
        $theme = $this->context->get('theme');
        $storeId = $theme['store_id'];
        $themeId = $theme['id'];
        
        // Se não temos info do tema, usar valores default
        if (!$storeId || !$themeId) {
            $storeId = request()->route('store_id') ?? '1';
            $themeId = request()->route('theme_id') ?? '176208380215';
        }

        // URL base da fonte (você pode configurar isso conforme necessário)
        $baseUrl = url('/fonts');
        
        // Nome do arquivo baseado no padrão
        $fileName = strtolower($family) . '_' . $styleModifier . ($weight/100);
        
        // Gerar o @font-face
        return "@font-face {
        font-family: {$family};
        font-weight: {$weight};
        font-style: {$style};
        font-display: {$fontDisplay};
        src: url(\"{$baseUrl}/" . strtolower($family) . "/{$fileName}.woff\") format(\"woff\"),
            url(\"{$baseUrl}/" . strtolower($family) . "/{$fileName}.woff2\") format(\"woff2\");
        }";
    }

    /**
     * Font modify filter - important for Liquid template
     */
    public function font_modify($font, $modifier, $value = null)
    {
        // Se o valor não foi fornecido como terceiro parâmetro,
        // significa que estamos recebendo os argumentos no formato Liquid
        if ($value === null && is_array($modifier)) {
            // No formato Liquid, o segundo parâmetro contém um array com todos os argumentos
            // após os dois pontos
            if (isset($modifier[0]) && isset($modifier[1])) {
                $mod = $modifier[0];
                $val = $modifier[1];
                return $this->font_modify($font, $mod, $val);
            }
        }
        
        if (empty($font) || !is_array($font)) {
            return $font;
        }
        
        // Create a copy to avoid modifying the original
        $modifiedFont = $font;
        
        switch ($modifier) {
            case 'weight':
                $modifiedFont['weight'] = $value;
                break;
            case 'style':
                $modifiedFont['style'] = $value;
                break;
        }
        
        return $modifiedFont;
    }

    /**
     * Filtro seguro para garantir que arrays não sejam convertidos diretamente para strings
     */
    public function json($input, $param = null)
    {
        // Se o input for null, retornar string vazia
        if (is_null($input)) {
            return 'null';
        }
        
        // Opções padrão para json_encode
        $options = JSON_UNESCAPED_UNICODE;
        
        // Processar parâmetros opcionais
        if ($param === 'escape_quotes') {
            // Escapar aspas com barras
            $options |= JSON_HEX_QUOT;
        } elseif ($param === 'no_escape') {
            // Não escapar barras
            $options |= JSON_UNESCAPED_SLASHES;
        }
        
        try {
            // Converter para JSON com as opções adequadas
            $result = json_encode($input, $options);
            
            // Se falhar, tentar novamente com opções básicas
            if ($result === false) {
                // Registrar erro de codificação
                Log::warning('json: Erro na codificação JSON', [
                    'error' => json_last_error_msg(),
                    'input_type' => gettype($input)
                ]);
                
                // Tentar novamente sem opções especiais
                $result = json_encode($input);
            }
            
            return $result !== false ? $result : 'null';
        } catch (\Exception $e) {
            Log::error('json: Falha ao converter para JSON', [
                'input_type' => gettype($input),
                'error' => $e->getMessage()
            ]);
            
            return 'null';
        }
    }

    /**
 * Generate a URL for a media object with specific parameters
 * 
 * @param mixed $input The media object or URL
 * @param array $params Parameters for URL generation
 * @return string The formatted image URL
 */
public function image_url($input, $params = [])
{
    // If input is null or empty, return empty string
    if (empty($input)) {
        return '';
    }
    
    // Extract the URL from the media object
    $url = '';
    $mediaInfo = [];
    
    // If input is an array (media object)
    if (is_array($input)) {
        // Special case for preview_image (common in Shopify media structures)
        if (isset($input['preview_image']) && is_array($input['preview_image'])) {
            if (isset($input['preview_image']['src'])) {
                $url = $input['preview_image']['src'];
                $mediaInfo = $input['preview_image'];
            }
        }
        // Direct src attribute
        elseif (isset($input['src'])) {
            $url = $input['src'];
            $mediaInfo = $input;
        } 
        // URL attribute
        elseif (isset($input['url'])) {
            $url = $input['url'];
            $mediaInfo = $input;
        }
    } 
    // If input is already a string (URL)
    elseif (is_string($input)) {
        $url = $input;
    }
    
    // If we couldn't extract a URL, return empty string
    if (empty($url)) {
        \Log::warning('image_url: Could not extract URL from input', [
            'input_type' => gettype($input)
        ]);
        return '';
    }
    
    // Extract alt text and dimensions for later use
    if (!empty($mediaInfo)) {
        if (isset($mediaInfo['alt'])) {
            $params['alt'] = $mediaInfo['alt'];
        }
        if (isset($mediaInfo['width'])) {
            $params['original_width'] = $mediaInfo['width'];
        }
        if (isset($mediaInfo['height'])) {
            $params['original_height'] = $mediaInfo['height'];
        }
    }
    
    // Make sure URL is properly formatted (no double forward slashes except after protocol)
    // First, normalize URL to use // for protocol-relative URLs
    if (strpos($url, 'http://') === 0) {
        $url = substr($url, 5); // Remove 'http:'
    } elseif (strpos($url, 'https://') === 0) {
        $url = substr($url, 6); // Remove 'https:'
    }
    
    // Ensure the URL starts with //
    if (strpos($url, '//') !== 0) {
        $url = '//' . ltrim($url, '/');
    }
    
    // Extract URL parameters
    $urlParts = parse_url($url);
    $host = $urlParts['host'] ?? '';
    $path = $urlParts['path'] ?? '';
    $query = $urlParts['query'] ?? '';
    
    // Parse query string into array
    parse_str($query, $queryParams);
    
    // Add width parameter if specified
    if (isset($params['width']) && is_numeric($params['width'])) {
        $queryParams['width'] = $params['width'];
    }
    
    // Add crop parameter if specified
    if (isset($params['crop'])) {
        $queryParams['crop'] = $params['crop'];
    }
    
    // Add scale parameter if specified
    if (isset($params['scale'])) {
        $queryParams['scale'] = $params['scale'];
    }
    
    // Format the URL with updated query parameters
    $formattedUrl = $host . $path;
    
    // Check if there's a version query param, which comes first
    $version = '';
    if (isset($queryParams['v'])) {
        $version = 'v=' . $queryParams['v'];
        unset($queryParams['v']);
    }
    
    // Build query string
    $newQuery = http_build_query($queryParams);
    
    // Add version param first if it exists
    if (!empty($version)) {
        $newQuery = $version . (!empty($newQuery) ? '&' . $newQuery : '');
    }
    
    // Construct the final URL
    $finalUrl = '//' . $formattedUrl . (!empty($newQuery) ? '?' . $newQuery : '');
    
    return $finalUrl;
}

    /**
     * Generate an HTML img tag from an image URL with responsive features
     * 
     * @param string $url The image URL
     * @param array $params Parameters for image tag generation
     * @return string The HTML img tag
     */
    public function image_tag($url, $params = [])
    {
        // If URL is null or empty, return empty string
        if (empty($url)) {
            return '';
        }
        
        // Initialize HTML attributes
        $attributes = [];
        
        // Set src attribute
        $attributes['src'] = $url;
        
        // Add alt attribute (with special handling for product titles)
        if (isset($params['alt'])) {
            $attributes['alt'] = $params['alt'];
        } elseif (isset($this->context) && $this->context->hasKey('product.title')) {
            $attributes['alt'] = $this->context->get('product.title');
        } else {
            $attributes['alt'] = '';
        }
        
        // Add class attribute
        if (isset($params['class'])) {
            $attributes['class'] = $params['class'];
        }
        
        // Add loading attribute (default to lazy if specified)
        if (isset($params['loading'])) {
            $attributes['loading'] = $params['loading'];
        }
        
        // Add sizes attribute (important for responsive images)
        if (isset($params['sizes'])) {
            $attributes['sizes'] = $params['sizes'];
        }
        
        // Process image dimensions - use width from params or from URL
        $width = null;
        if (isset($params['width']) && is_numeric($params['width'])) {
            $width = $params['width'];
        } else {
            // Try to extract width from URL
            $urlParts = parse_url($url);
            parse_str($urlParts['query'] ?? '', $queryParams);
            if (isset($queryParams['width']) && is_numeric($queryParams['width'])) {
                $width = $queryParams['width'];
            }
        }
        
        if ($width) {
            $attributes['width'] = $width;
            
            // Calculate height based on aspect ratio if original dimensions are known
            if (isset($params['original_width']) && isset($params['original_height']) && 
                $params['original_width'] > 0) {
                $aspectRatio = $params['original_height'] / $params['original_width'];
                $attributes['height'] = round($width * $aspectRatio);
            } else {
                // Default to square if original dimensions are unknown
                $attributes['height'] = $width;
            }
        }
        
        // Generate srcset attribute if widths are provided
        if (isset($params['widths'])) {
            $srcset = [];
            $widths = is_array($params['widths']) ? $params['widths'] : explode(',', $params['widths']);
            
            // Parse base URL to extract components
            $urlParts = parse_url($url);
            $host = $urlParts['host'] ?? '';
            $path = $urlParts['path'] ?? '';
            $query = $urlParts['query'] ?? '';
            parse_str($query, $baseQueryParams);
            
            // Store version separately
            $version = '';
            if (isset($baseQueryParams['v'])) {
                $version = $baseQueryParams['v'];
            }
            
            foreach ($widths as $width) {
                $width = trim($width);
                if (is_numeric($width)) {
                    // Create a copy of query params and update width
                    $queryParams = $baseQueryParams;
                    $queryParams['width'] = $width;
                    
                    // Build new query string - ensure version param comes first
                    if (!empty($version)) {
                        $queryString = 'v=' . $version . '&width=' . $width;
                    } else {
                        $queryString = 'width=' . $width;
                    }
                    
                    // Construct srcset URL (matching the expected Shopify CDN format)
                    $srcsetUrl = '//' . $host . $path . '?' . $queryString;
                    $srcset[] = $srcsetUrl . ' ' . $width . 'w';
                }
            }
            
            if (!empty($srcset)) {
                $attributes['srcset'] = implode(', ', $srcset);
            }
        }
        
        // Build the HTML attributes string
        $htmlAttrs = '';
        foreach ($attributes as $name => $value) {
            $htmlAttrs .= ' ' . $name . '="' . htmlspecialchars($value, ENT_QUOTES) . '"';
        }
        
        // Generate the complete img tag
        return '<img' . $htmlAttrs . '>';
    }

    /**
     * Calculate aspect ratio based on original dimensions or specified values
     * 
     * @param array $media Media object with dimensions
     * @param array $params Parameters that might include aspect_ratio
     * @return string CSS aspect-ratio value or empty if undefined
     */
    private function calculateAspectRatio($media, $params = [])
    {
        // If aspect_ratio is explicitly set, use it
        if (isset($params['aspect_ratio'])) {
            return $params['aspect_ratio'];
        }
        
        // If we have original width and height, calculate the ratio
        if (isset($media['width']) && isset($media['height']) && $media['width'] > 0) {
            return ($media['height'] / $media['width']) * 100 . '%';
        }
        
        // Check for width/height in preview_image
        if (isset($media['preview_image']) && 
            isset($media['preview_image']['width']) && 
            isset($media['preview_image']['height']) && 
            $media['preview_image']['width'] > 0) {
            
            return ($media['preview_image']['height'] / $media['preview_image']['width']) * 100 . '%';
        }
        
        // Default for images when no dimensions found
        return '100%';
    }

    /**
     * Filter to extract the media type from a media object
     * 
     * @param mixed $media The media object
     * @return string The media type (image, video, etc.)
     */
    public function media_type($media)
    {
        if (empty($media) || !is_array($media)) {
            return 'image'; // Default fallback
        }
        
        // Directly check media_type property
        if (isset($media['media_type'])) {
            return $media['media_type'];
        }
        
        // Check based on content type
        if (isset($media['media_content_type'])) {
            if (strpos($media['media_content_type'], 'image/') === 0) {
                return 'image';
            } elseif (strpos($media['media_content_type'], 'video/') === 0) {
                return 'video';
            } elseif ($media['media_content_type'] === 'external_video') {
                return 'external_video';
            } elseif (strpos($media['media_content_type'], 'model/') === 0) {
                return 'model';
            }
        }
        
        // Fallback
        return 'image';
    }

    /**
     * Filter to extract the aspect ratio from a media object as a percentage
     * 
     * @param mixed $media The media object
     * @return float The aspect ratio as percentage (height/width * 100)
     */
    public function media_aspect_ratio($media)
    {
        if (empty($media) || !is_array($media)) {
            return 100; // Default square aspect ratio (100%)
        }
        
        // Look for width/height directly in the media object
        if (isset($media['width']) && isset($media['height']) && $media['width'] > 0) {
            return ($media['height'] / $media['width']) * 100;
        }
        
        // Look in preview_image
        if (isset($media['preview_image']) && 
            isset($media['preview_image']['width']) && 
            isset($media['preview_image']['height']) && 
            $media['preview_image']['width'] > 0) {
            
            return ($media['preview_image']['height'] / $media['preview_image']['width']) * 100;
        }
        
        // Default to square aspect ratio
        return 100;
    }

    /**
     * Access preview_image property from a media object
     * This is used in Liquid templates as: {{ media | img_url: ... }}
     *
     * @param mixed $media The media object
     * @return array The preview image data
     */
    public function img_url($media, $params = [])
    {
        if (empty($media) || !is_array($media)) {
            return '';
        }
        
        $previewImage = null;
        
        // Get the preview_image if it exists
        if (isset($media['preview_image'])) {
            $previewImage = $media['preview_image'];
        }
        // Otherwise use the media object directly if it has src
        elseif (isset($media['src'])) {
            $previewImage = $media;
        }
        
        // If we couldn't find a valid image, return empty string
        if (!$previewImage) {
            return '';
        }
        
        // Return the image URL using the image_url filter
        return $this->image_url($previewImage, $params);
    }

    /**
     * Handle the combined media.preview_image | image_url | image_tag filters chain
     * This method simulates the behavior of Shopify's Liquid filters chain
     * 
     * @param mixed $media The media object
     * @param array $params Parameters for filter processing
     * @return string The HTML img tag
     */
    public function media_image_tag($media, $params = [])
    {
        // Extract image parameters from the filter chain
        $imageUrlParams = [];
        $imageTagParams = [];
        
        // Process width param for image_url
        if (isset($params['width']) && is_numeric($params['width'])) {
            $imageUrlParams['width'] = $params['width'];
        }
        
        // Process crop and scale params for image_url
        if (isset($params['crop'])) {
            $imageUrlParams['crop'] = $params['crop'];
        }
        if (isset($params['scale'])) {
            $imageUrlParams['scale'] = $params['scale'];
        }
        
        // Copy all params to image_tag params
        $imageTagParams = $params;
        
        // Extract preview_image if media is an object with that property
        $mediaObject = $media;
        if (is_array($media) && isset($media['preview_image'])) {
            $mediaObject = $media['preview_image'];
            
            // Pass original dimensions for proper aspect ratio
            if (isset($mediaObject['width'])) {
                $imageTagParams['original_width'] = $mediaObject['width'];
            }
            if (isset($mediaObject['height'])) {
                $imageTagParams['original_height'] = $mediaObject['height'];
            }
            
            // Pass alt text if available
            if (isset($mediaObject['alt'])) {
                $imageTagParams['alt'] = $mediaObject['alt'];
            } elseif (isset($media['alt'])) {
                $imageTagParams['alt'] = $media['alt'];
            }
        }
        
        // First apply image_url filter
        $url = $this->image_url($mediaObject, $imageUrlParams);
        
        // Then apply image_tag filter with the resulting URL and all params
        return $this->image_tag($url, $imageTagParams);
    }
    
    /**
     * Filtro safe_output - Similar ao filtro |json da Shopify, mas para uso mais geral
     * Garante que qualquer tipo de dado seja convertido para string de forma segura
     */
    public function safe_output($input)
    {
        // Se for uma string, retornar diretamente
        if (is_string($input)) {
            return $input;
        }
        
        // Se for null, retornar string vazia
        if (is_null($input)) {
            return '';
        }
        
        // Se for boolean, converter para "true" ou "false"
        if (is_bool($input)) {
            return $input ? 'true' : 'false';
        }
        
        // Se for número, converter diretamente
        if (is_numeric($input)) {
            return (string)$input;
        }
        
        // Se for um array ou objeto, converter para JSON
        if (is_array($input) || is_object($input)) {
            try {
                return json_encode($input, JSON_UNESCAPED_UNICODE);
            } catch (\Exception $e) {
                Log::error('safe_output: Falha ao converter array/objeto para JSON', [
                    'input_type' => gettype($input),
                    'error' => $e->getMessage()
                ]);
                return '{}'; // Retornar objeto vazio em caso de erro
            }
        }
        
        // Outros tipos, tentar converter para string
        try {
            return (string)$input;
        } catch (\Exception $e) {
            Log::error('safe_output: Falha ao converter para string', [
                'input_type' => gettype($input),
                'error' => $e->getMessage()
            ]);
            return '';
        }
    }

    /**
     * Safely process SVG or any content that might be an array
     * Used to prevent "Array to string conversion" errors
     */
    public function safe_svg($input)
    {
        // If input is already a string, just return it
        if (is_string($input)) {
            return $input;
        }
        
        // If input is an array, try to handle it appropriately
        if (is_array($input)) {
            Log::debug('safe_svg: Converting array to string', [
                'array_keys' => array_keys($input)
            ]);
            
            // Check if the array has a 'content' key
            if (isset($input['content']) && is_string($input['content'])) {
                return $input['content'];
            }
            
            // Otherwise, try generating a placeholder SVG
            return '<svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"></svg>';
        }
        
        // For null values, return empty string
        if (is_null($input)) {
            return '';
        }
        
        // For any other type, try to convert to string
        try {
            return (string)$input;
        } catch (\Exception $e) {
            Log::error('safe_svg: Failed to convert to string', [
                'input_type' => gettype($input),
                'error' => $e->getMessage()
            ]);
            
            return '';
        }
    }
    
    public function font_url($input, $params = '')
    {
        if (empty($input) || (!is_array($input) && !is_string($input))) {
            return '';
        }
        
        // Get theme context
        $theme = $this->context->get('theme');
        $storeId = $theme['store_id'] ?? request()->route('store_id') ?? '1';
        $themeId = $theme['id'] ?? request()->route('theme_id') ?? '176208380215';
        
        // Handle array format (standard font object)
        if (is_array($input)) {
            // Extract font properties
            $family = $input['family'] ?? '';
            $weight = isset($input['weight']) && $input['weight'] > 0 ? $input['weight'] : 400;
            $style = isset($input['style']) ? $input['style'] : 'normal';
            
            // Create style marker
            $styleMarker = ($style === 'italic') ? 'i' : 'n';
            
            // Extract first digit of weight (shopify style)
            $weightDigit = substr((string)$weight, 0, 1);
            
            // Create font key for tracking
            $fontKey = strtolower($family) . "_" . $styleMarker . $weightDigit;
            
            // Check if this font has already been loaded
            if ($this->isResourceLoaded('font', $fontKey)) {
                // Return empty string - the font is already loaded
                return '';
            }
            
            // Determine font format
            $format = $this->determineFontFormat($params);
            
            // Return font URL based on format
            return url("/fonts/" . strtolower($family) . "/" . strtolower($family) . "_{$styleMarker}{$weightDigit}.{$format}");
        }
        
        // Handle string format (e.g., "assistant_n4")
        if (is_string($input)) {
            $parts = explode('_', $input);
            $family = $parts[0] ?? '';
            $weightStyle = $parts[1] ?? 'n4';
            
            // Extract weight and style from weightStyle notation
            $isItalic = substr($weightStyle, 0, 1) === 'i';
            $weightDigit = substr($weightStyle, 1, 1);
            $weight = intval($weightDigit) * 100;
            $style = $isItalic ? 'italic' : 'normal';
            $styleMarker = $isItalic ? 'i' : 'n';
            
            // Check if this font has already been loaded
            if ($this->isResourceLoaded('font', $input)) {
                return '';
            }
            
            // Determine font format
            $format = $this->determineFontFormat($params);
            
            // Return font URL
            return url("/fonts/" . strtolower($family) . "/" . strtolower($family) . "_{$styleMarker}{$weightDigit}.{$format}");
        }
        
        return '';
    }

    /**
     * Safely convert any value to a string
     * Used to prevent "Array to string conversion" errors
     */
    public function to_string($input)
    {
        // If already a string, return as is
        if (is_string($input)) {
            return $input;
        }
        
        // Handle arrays
        if (is_array($input)) {
            // If array has a 'content' key, return that
            if (isset($input['content']) && is_string($input['content'])) {
                return $input['content'];
            }
            
            // Otherwise, try to JSON encode (but catch errors)
            try {
                return json_encode($input, JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE);
            } catch (\Exception $e) {
                Log::error('to_string: JSON encode failed', [
                    'error' => $e->getMessage()
                ]);
                return '';
            }
        }
        
        // Handle null
        if (is_null($input)) {
            return '';
        }
        
        // Try to convert anything else to string
        try {
            return (string)$input;
        } catch (\Exception $e) {
            Log::error('to_string: String conversion failed', [
                'input_type' => gettype($input),
                'error' => $e->getMessage()
            ]);
            return '';
        }
    }
    
    /**
     * Safe division filter to prevent division by zero errors
     */
    public function safe_divide($input, $operand)
    {
        // Check if operand is zero, null, or empty
        if (empty($operand) || $operand === 0 || $operand === '0') {
            Log::warning('safe_divide: División por cero evitada', [
                'input' => $input,
                'operand' => $operand
            ]);
            return 0;
        }
        
        // Otherwise perform normal division
        return $input / $operand;
    }
    

    // Implementação do hexToRgb
    private function hexToRgb(string $hex): array
    {
        $hex = ltrim($hex, '#');
        
        if (strlen($hex) === 3) {
            $r = hexdec(substr($hex, 0, 1) . substr($hex, 0, 1));
            $g = hexdec(substr($hex, 1, 1) . substr($hex, 1, 1));
            $b = hexdec(substr($hex, 2, 1) . substr($hex, 2, 1));
        } else {
            $r = hexdec(substr($hex, 0, 2));
            $g = hexdec(substr($hex, 2, 2));
            $b = hexdec(substr($hex, 4, 2));
        }
        
        return [
            'r' => $r,
            'g' => $g,
            'b' => $b
        ];
    }


    public function default($value, $default_value = '')
    {
        return empty($value) ? $default_value : $value;
    }

    /**
     * Registrar todos os filtros disponíveis - Versão melhorada com mais filtros
     */
    public static function register($context): array
    {
        // Reset resource tracking whenever registering filters for a new context
        self::resetResourceTracking();
        
        $instance = new self($context);
        return [
            // Asset e Template filters
            'asset_url' => [$instance, 'asset_url'],
            'stylesheet_tag' => [$instance, 'stylesheet_tag'],
            'font_url' => [$instance, 'font_url'],
            'font_modify' => [$instance, 'font_modify'],
            'font_face' => [$instance, 'font_face'],
            'default' => [$instance, 'default'],
            
            // Color filters
            'color_brightness' => [$instance, 'color_brightness'],
            'color_lighten' => [$instance, 'color_lighten'],
            'color_darken' => [$instance, 'color_darken'],
            'to_hex' => [$instance, 'to_hex'],
            
            // Money filters
            'money' => [$instance, 'money'],
            'money_with_currency' => [$instance, 'money_with_currency'],
            
            // Content filters
            'inline_asset_content' => [$instance, 'inline_asset_content'],
            'safe_svg' => [$instance, 'safe_svg'],
            'to_string' => [$instance, 'to_string'],
            'safe_divide' => [$instance, 'safe_divide'],
            'safe_output' => [$instance, 'safe_output'],
            'json' => [$instance, 'json'],
            'placeholder_svg_tag' => [$instance, 'placeholder_svg_tag'],
            't' => [$instance, 't'],
            'translate' => [$instance, 'translate'],
            'structured_data' => [$instance, 'structured_data'],
            
            // Media filters
            'image_url' => [$instance, 'image_url'],
            'image_tag' => [$instance, 'image_tag'],
            'img_url' => [$instance, 'img_url'],
            'media_type' => [$instance, 'media_type'],
            'media_aspect_ratio' => [$instance, 'media_aspect_ratio'],
            
            // Helper para cadeias de filtros específicas
            'media_image_tag' => [$instance, 'media_image_tag'],
        ];
    }
}